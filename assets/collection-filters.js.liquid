(async function () {
    function toggleTab(searchByValue) {
        // Menu
        const tabSize = document.querySelector('a[data-w-tab="1"]');
        const tabCar = document.querySelector('a[data-w-tab="2"]');

        // Panels
        const tabContentBySize = document.querySelector('.tab-pane-tab-1');
        const tabContentByCar = document.querySelector('.tab-pane-tab-2');

        // Sub tabs
        const subTabContentBySize = document.querySelector('div[data-sub-tab="1.1"]');
        const subTabContentByCar = document.querySelector('div[data-sub-tab="2.1"]');

        // Check the value of c.searchBy and toggle classes accordingly
        if (searchByValue === 'bySize') {
            tabSize.classList.add('w--current');
            tabContentBySize.style.display = "block";
            tabContentBySize.classList.add('w--tab-active');
            subTabContentBySize.classList.add('w--tab-active');

            tabCar.classList.remove('w--current');
            tabContentByCar.style.display = "none";
            tabContentByCar.classList.remove('w--tab-active');
            subTabContentByCar.classList.remove('w--tab-active');
        } else if (searchByValue === 'byCar') {
            tabCar.classList.add('w--current');
            tabContentByCar.style.display = "block";
            tabContentByCar.classList.add('w--tab-active');
            subTabContentByCar.classList.add('w--tab-active');

            tabSize.classList.remove('w--current');
            tabContentBySize.style.display = "none";
            tabContentBySize.classList.remove('w--tab-active');
            subTabContentBySize.classList.remove('w--tab-active');
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);

        const filtersForm = document.getElementById('filtersForm');

        // Initialize price filter values from URL parameters if they exist
        const priceFrom = urlParams.get('filter.v.price.gte');
        const priceTo = urlParams.get('filter.v.price.lte');
        if (priceFrom) {
            document.getElementById('Filter-price-from').value = priceFrom;
        }

        if (priceTo) {
            document.getElementById('Filter-price-to').value = priceTo;
        }

        // Initialize ET filter values from URL parameters if they exist
        const minETElement = document.getElementById('minET');
        const maxETElement = document.getElementById('maxET');

        if (minETElement) {
            const minET = urlParams.get('filter.v.rims.e_t.gte');
            if (minET !== null) {
                minETElement.value = minET;
            }
        }

        if (maxETElement) {
            const maxET = urlParams.get('filter.v.rims.e_t.lte');
            if (maxET !== null) {
                maxETElement.value = maxET;
            }
        }

        const singleET = urlParams.get('filter.p.m.rims.e_t');
        const minET = urlParams.get('filter.v.rims.e_t.gte');
        const maxET = urlParams.get('filter.v.rims.e_t.lte');

        if (singleET) {
            if (minETElement) minETElement.value = singleET;
            if (maxETElement) maxETElement.value = singleET;
        }

        if (minETElement && minET) {
            minETElement.value = minET;
        }

        if (maxETElement && maxET) {
            maxETElement.value = maxET;
        }

        // Ensure only one type of ET filter is present in URL
        function manageETFilters() {
            if (urlParams.has('filter.v.rims.e_t.gte') || urlParams.has('filter.v.rims.e_t.lte')) {
                urlParams.delete('filter.p.m.rims.e_t');
            }
        }

        // Initialize year filter values from URL parameters if they exist
        const minYearElement = document.getElementById('minYear');
        const maxYearElement = document.getElementById('maxYear');

        if (minYearElement) {
            const minYear = urlParams.get('filter.v.tires.years.gte');
            if (minYear !== null) {
                minYearElement.value = minYear;
            }
        }

        if (maxYearElement) {
            const maxYear = urlParams.get('filter.v.tires.years.lte');
            if (maxYear !== null) {
                maxYearElement.value = maxYear;
            }
        }

        // Add event listeners to the checkboxes
        const checkboxes = document.querySelectorAll('.form-checkbox-icon');

        function handleCheckboxChange(event) {
            const checkbox = event.target;
            const filterName = checkbox.name;
            const filterValue = checkbox.value;

            if (checkbox.checked) {
                checkbox.classList.add('w--redirected-checked');
                checkbox.classList.add('w-checkbox-input--inputType-custom');
                urlParams.set(filterName, filterValue);
            } else {
                checkbox.classList.remove('w--redirected-checked');
                checkbox.classList.remove('w-checkbox-input--inputType-custom');
                urlParams.delete(filterName);
            }

            const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
            history.pushState(null, '', newUrl);
            window.location.reload();
        }

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', handleCheckboxChange);
        });

        // Add event listeners to the tabs for click events
        const tabSize = document.querySelector('a[data-w-tab="1"]');
        const tabCar = document.querySelector('a[data-w-tab="2"]');

        if (tabSize && tabCar) {
            tabSize.addEventListener('click', function () {
                toggleTab('bySize');
            });

            tabCar.addEventListener('click', function () {
                toggleTab('byCar');
            });
        }

        // Initialize tabs based on saved searchByValue or default to 'bySize'
        const searchByValue = localStorage.getItem('searchBy') || 'bySize';
        toggleTab(searchByValue);

        // Expand filter on click, collapse on exit button, default hide filters on mobile
        function checkScreenWidth() {
            if (window.innerWidth < 992) {
                filtersWrapper.style.display = 'none';
            } else {
                filtersWrapper.style.display = 'block';
            }
        }

        const filtersWrapper = document.querySelector('.filters2_filters-wrapper');

        const expandFiltersButton = document.querySelector('.filters2_tablet-filters-button');
        expandFiltersButton.addEventListener('click', function () {
            filtersWrapper.style.display = 'block';
        });

        const collapseFiltersButton = document.querySelector('.filters2_tablet-modal-close-button');
        collapseFiltersButton.addEventListener('click', function () {
            filtersWrapper.style.display = 'none';
        });

        checkScreenWidth();
        window.addEventListener('resize', checkScreenWidth);

        // Add event listener to submit event of the form
        filtersForm.addEventListener('submit', function (event) {
            event.preventDefault();

            // Add price filter values to the URL parameters
            const priceFromValue = document.getElementById('Filter-price-from').value;
            const priceToValue = document.getElementById('Filter-price-to').value;
            if (priceFromValue) {
                urlParams.set('filter.v.price.gte', priceFromValue);
            } else {
                urlParams.delete('filter.v.price.gte');
            }
            if (priceToValue) {
                urlParams.set('filter.v.price.lte', priceToValue);
            } else {
                urlParams.delete('filter.v.price.lte');
            }

            // Add ET filter values to the URL parameters if elements exist
            if (minETElement) {
                const minETValue = minETElement.value;
                if (minETValue) {
                    urlParams.set('filter.v.rims.e_t.gte', minETValue);
                } else {
                    urlParams.delete('filter.v.rims.e_t.gte');
                }
            }

            if (maxETElement) {
                const maxETValue = maxETElement.value;
                if (maxETValue) {
                    urlParams.set('filter.v.rims.e_t.lte', maxETValue);
                } else {
                    urlParams.delete('filter.v.rims.e_t.lte');
                }
            }

            manageETFilters();

            // Add year filter values to the URL parameters if elements exist
            if (minYearElement) {
                const minYearValue = minYearElement.value;
                if (minYearValue) {
                    urlParams.set('filter.v.tires.years.gte', minYearValue);
                } else {
                    urlParams.delete('filter.v.tires.years.gte');
                }
            }

            if (maxYearElement) {
                const maxYearValue = maxYearElement.value;
                if (maxYearValue) {
                    urlParams.set('filter.v.tires.years.lte', maxYearValue);
                } else {
                    urlParams.delete('filter.v.tires.years.lte');
                }
            }

            const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
            history.pushState(null, '', newUrl);

            // Reload the page
            window.location.href = newUrl;
        });
    });
})();
