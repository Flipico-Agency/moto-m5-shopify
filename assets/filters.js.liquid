document.addEventListener('DOMContentLoaded', async function () {
    const baseURL = 'https://api.wheel-size.com/v2';
    const userKey = '8608442fd845888bda065b97c8d141d9';

    async function fetchData(endpoint, params) {
        try {
            const url = new URL(`${baseURL}/${endpoint}`); // Ensure baseURL is defined and correct
            url.search = new URLSearchParams({ user_key: userKey, ...params }).toString();
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Fetch Error:', error);
            // Return a default object or handle the error as needed
            {% comment %}return { data: [] };{% endcomment %}
        }
    }

    function manageSelect(element, options = [], isEnabled = true, placeholder = "Wybierz...") {
        if (!element) return;

        element.innerHTML = isEnabled && placeholder ? `<option value="">${placeholder}</option>` : '';
        if (isEnabled) {
            options.forEach((option, index) => {
                let optionDisplayValue;
                let optionActualValue;

                if (element.dataset.name === 'car-generacja') {
                    optionDisplayValue = index + 1;
                    optionActualValue = option.slug;
                } else {
                    optionDisplayValue = option.name;
                    optionActualValue = option.value || option.slug;
                }

                element.add(new Option(optionDisplayValue, optionActualValue));
            });
        }

        element.disabled = !isEnabled;
        const styleProps = { pointerEvents: isEnabled ? 'auto' : 'none', opacity: isEnabled ? '1' : '0.5' };
        Object.assign(element.style, styleProps);

        const parentDiv = element.closest('.form-field-wrapper');
        if (parentDiv) Object.assign(parentDiv.style, styleProps);
    }

    function mapSelectNameToApiParam(selectName) {
        const mapping = {
            // Map for tires and rims
            'tire-width': 'section_width',
            'tire-profile': 'aspect_ratio',
            'tire-diameter': 'rim_diameter',
            'rim-bolt': 'bolt_pattern',
            'rim-width': 'rim_width',
            'rim-diameter': 'rim_diameter',

            // Map for cars
            'car-marka': 'make',
            'car-model': 'model',
            'car-generacja': 'generation',
            'car-silnik': 'engine'
        };
        return mapping[selectName] || selectName;
    }

    function mapSelectNameToURLParam(selectName) {
        const mapping = {
            // Map for tires and rims
            'tire-width': 'filter.p.m.tires.width',
            'tire-profile': 'filter.p.m.tires.profile',
            'tire-diameter': 'filter.p.m.tires.diameter',
            'tire-season': 'filter.p.m.tires.season',
            'rim-bolt': 'filter.p.m.rim.rim_bolt',
            'rim-width': 'filter.p.m.rim.width',
            'rim-diameter': 'filter.p.m.rim.diameter',

            // Map for cars
            'car-marka': 'filter.p.m.car.make',
            'car-model': 'filter.p.m.car.model',
            'car-generacja': 'filter.p.m.car.generation',
            'car-silnik': 'filter.p.m.car.engine'
        };
        return mapping[selectName] || selectName;
    }

    async function initializeSelects(activeTabContent, elements, fetchDataEndpoints, urlParams) {
        let selectedValues = {};

        for (let i = 0; i < elements.length; i++) {
            const elementName = elements[i];
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);
            {% comment %}console.log(`Processing selector: ${elementName}`);{% endcomment %}

            if (!selectElement) continue;

            const apiParam = mapSelectNameToApiParam(elementName);
            const fetchDataParams = { region: 'eudm' };

            const urlParamKey = mapSelectNameToURLParam(elementName);
            const urlParamValue = urlParams.get(urlParamKey);

            if (urlParamValue) {
                selectedValues[apiParam] = urlParamValue;
            }

            // W przypadku braku wartości URL, kontynuuj z logiką API
            Object.keys(selectedValues).forEach(key => {
                if (typeof selectedValues[key] === 'string') {
                    fetchDataParams[key] = selectedValues[key];
                }
            });

            if (elementName === 'tire-season') {
                const seasons = ['Letnie', 'Zimowe', 'Całoroczne'];
                manageSelect(selectElement, seasons.map(season => ({ name: season, value: season })), true);
                if (urlParamValue) {
                    selectElement.value = urlParamValue;
                } else {
                    selectElement.value = 'Letnie'; // Default
                }
            } else if (apiParam && fetchDataEndpoints[elementName]) {
                {% comment %}console.log(`Sending API request for ${elementName} with params:`, fetchDataParams);{% endcomment %}
                const data = await fetchData(fetchDataEndpoints[elementName], fetchDataParams);
                {% comment %}console.log(`Received API data for ${elementName}:`, data);{% endcomment %}

                if (data && data.data) {
                    manageSelect(selectElement, data.data, true);

                    if (!selectElement.value && data.data.length > 0) {
                        selectElement.value = urlParamValue || data.data[0].value || data.data[0].slug;
                    }

                    selectedValues[apiParam] = elementName === 'car-generacja' ? data.data.find(item => item.slug === selectElement.value) : selectElement.value;
                }
            } else if (elementName === 'car-rok' && selectedValues['generation']) {
                // Handle car-year based on selected generation
                const generation = selectedValues['generation'];
                const years = generation.years; // Selected generation object includes years
                manageSelect(selectElement, years.map(year => ({ name: year, value: year })), true);
                if (years.length > 0) {
                    selectElement.value = years[0];
                }
                selectedValues['year'] = selectElement.value;
            } else {
                manageSelect(selectElement, [], false); // Disable the select for other cases
            }
        }
    }

    function setupEventListeners(activeTabContent, elements, fetchDataEndpoints) {
        elements.forEach((elementName, index) => {
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);

            selectElement.addEventListener('change', async () => {
                checkFormCompleteAndManageSubmitButton(activeTabContent, elements);

                if (elementName === 'tire-season') return;

                if (index < elements.length) {
                    const nextElementName = elements[index + 1];
                    const nextSelectElement = activeTabContent.querySelector(`select[data-name="${nextElementName}"]`);

                    if (selectElement.value && elementName !== 'tire-season' && nextElementName !== 'tire-season') {
                        const apiParam = mapSelectNameToApiParam(elementName);
                        const data = await fetchData(fetchDataEndpoints[nextElementName], { region: 'eudm', [apiParam]: selectElement.value });
                        manageSelect(nextSelectElement, data.data, true);
                    } else {
                        if (nextElementName !== 'tire-season') {
                            manageSelect(nextSelectElement, [], false);
                        }
                    }

                    elements.slice(index + 2).forEach(name => {
                        if (name !== 'tire-season') {
                            const elementToDisable = activeTabContent.querySelector(`select[data-name="${name}"]`);
                            manageSelect(elementToDisable, [], false);
                        }
                    });
                }
            });
        });
    }

    function buildSizeQueryParameters(activeSubTabNumber, tire, rim, urlParams) {
        let queryParams = {};

        // Base parameters for tires are always included in subtabs 1 and 2
        if (activeSubTabNumber === '1' || activeSubTabNumber === '2') {
            queryParams = {
                'filter.p.m.tires.width': tire.width.value,
                'filter.p.m.tires.profile': tire.profile.value,
                'filter.p.m.tires.diameter': tire.diameter.value,
                'filter.p.m.tires.season': tire.season.value
            };
        }

        // Include manufacturer if present in the URL (applicable only to subtab 1)
        if (activeSubTabNumber === '1') {
            const manufacturer = urlParams.get('filter.p.m.tires.manufacturer');
            if (manufacturer) {
                queryParams['filter.p.m.tires.manufacturer'] = manufacturer;
            }
        }

        // For subtab 2, include rim parameters along with base tire parameters
        if (activeSubTabNumber === '2') {
            Object.assign(queryParams, {
                'filter.p.m.rim.rim_bolt': rim.bolt.value,
                'filter.p.m.rim.width': rim.width.value
            });
        }

        // For subtab 3, only include rim parameters
        if (activeSubTabNumber === '3') {
            queryParams = {
                'filter.p.m.rim.diameter': rim.diameter.value,
                'filter.p.m.rim.rim_bolt': rim.bolt.value,
                'filter.p.m.rim.width': rim.width.value,
                'filter.p.m.rim.rim_et': rim.et.value
            };
        }

        return queryParams;
    }
    function buildCarQueryParameters(activeSubTabNumber, elements, urlParams) {
        let queryParams = {};

        elements.forEach(element => {
            const selectElement = document.querySelector(`select[data-name="${element}"]`);
            if (selectElement && selectElement.value) {
                const urlParamKey = mapSelectNameToURLParam(element);
                queryParams[urlParamKey] = selectElement.value;
            }
        });

        for (const [key, value] of urlParams.entries()) {
            if (!queryParams.hasOwnProperty(key) && value) {
                queryParams[key] = value;
            }
        }

        return queryParams;
    }

    function checkFormCompleteAndManageSubmitButton(activeTabContent, elements) {
        const allSelected = elements.every(elementName => {
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);
            return selectElement && selectElement.value;
        });
        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        manageSelect(submitButton, [], allSelected);
    }

    async function initializeSizeForm(activeTabContent, activeSubTabNumber, formAction) {
        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        const urlParams = new URLSearchParams(window.location.search);

        const tireElements = ['tire-width', 'tire-profile', 'tire-diameter', 'tire-season'];
        const rimElements = ['rim-diameter', 'rim-bolt', 'rim-width', 'rim-et'];
        const wheelElements = ['tire-width', 'tire-profile', 'tire-diameter', 'rim-bolt', 'rim-width', 'tire-season'];
        const fetchDataEndpoints = {
            'tire-width': 'by_tire/sw/', 'tire-profile': 'by_tire/ar/', 'tire-diameter': 'by_tire/rd/',
            'rim-diameter': 'by_rim/rd/', 'rim-bolt': 'by_rim/bp/', 'rim-width': 'by_rim/rw/', 'rim-et': 'by_rim/of/'
        };

        // Construct tire and rim objects with corresponding select elements
        const tire = {
            width: activeTabContent.querySelector(`select[data-name="tire-width"]`),
            profile: activeTabContent.querySelector(`select[data-name="tire-profile"]`),
            diameter: activeTabContent.querySelector(`select[data-name="tire-diameter"]`),
            season: activeTabContent.querySelector(`select[data-name="tire-season"]`)
        };
        const rim = {
            diameter: activeTabContent.querySelector(`select[data-name="rim-diameter"]`),
            bolt: activeTabContent.querySelector(`select[data-name="rim-bolt"]`),
            width: activeTabContent.querySelector(`select[data-name="rim-width"]`),
            et: activeTabContent.querySelector(`select[data-name="rim-et"]`)
        };

        // Initialize select elements based on the active sub-tab
        const elementsToInitialize = activeSubTabNumber === '1' ? tireElements : activeSubTabNumber === '2' ? wheelElements : rimElements;
        setupEventListeners(activeTabContent, elementsToInitialize, fetchDataEndpoints);
        await initializeSelects(activeTabContent, elementsToInitialize, fetchDataEndpoints, urlParams);
        checkFormCompleteAndManageSubmitButton(activeTabContent, elementsToInitialize);

        const form = submitButton.form;
        form.addEventListener('submit', event => {
            event.preventDefault();
            localStorage.setItem('searchBy', 'bySize');

            // Build query parameters based on the active sub-tab and selected options
            const queryParams = buildSizeQueryParameters(activeSubTabNumber, tire, rim, urlParams);
            window.location.href = `${formAction}?${new URLSearchParams(queryParams).toString()}`;
        });
    }

    async function initializeCarForm(activeTabContent, activeSubTabNumber, formAction) {
        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        const urlParams = new URLSearchParams(window.location.search);

        const elements = ['car-marka', 'car-model', 'car-generacja', 'car-rok', 'car-silnik'];
        const fetchDataEndpoints = {
            'car-marka': 'makes/',
            'car-model': 'models/',
            'car-generacja': 'generations/',
            'car-silnik': 'modifications/'
        };

        setupEventListeners(activeTabContent, elements, fetchDataEndpoints);
        await initializeSelects(activeTabContent, elements, fetchDataEndpoints, urlParams);
        checkFormCompleteAndManageSubmitButton(activeTabContent, elements);

        const form = submitButton.form;
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            localStorage.setItem('searchBy', 'byCar');

            // Build query parameters based on the active sub-tab and selected options
            const queryParams = buildCarQueryParameters(activeSubTabNumber, elements, new URLSearchParams(window.location.search));

            const queryString = Object.entries(queryParams).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');
            window.location.href = `${formAction}?${queryString}`;
        });
    }

    function getActiveTabInfo() {
        const activePage = window.location.pathname;
        let activeTabContent;
        let activeSubTabNumber = null;

        const pathToSubTabNumber = {
            '/collections/opony': '1',
            '/collections/kola': '2',
            '/collections/felgi': '3'
        };

        if (activePage === '/') {
            activeTabContent = document.querySelector('.w-tab-pane.w--tab-active > div > div.w-tab-pane.w--tab-active');
            const activeSubTab = document.querySelector('.tab-link-left-search.w--current');
            if (activeSubTab) {
                activeSubTabNumber = activeSubTab.getAttribute('data-w-tab').split('.')[1];
            }
        } else {
            if (activePage.includes('/pages/opony/')) {
                activeTabContent = document.getElementById('tire-manufacturer-form');
                activeSubTabNumber = '1';
            } else if (activePage.includes('/collections/')) {
                activeTabContent = document.querySelector('div[data-sub-tab].w-tab-pane.w--tab-active');
                activeSubTabNumber = pathToSubTabNumber[activePage] || null;
            }
        }

        return { activeTabContent, activeSubTabNumber };
    }

    function activateFormInitialization() {
        const { activeTabContent, activeSubTabNumber } = getActiveTabInfo();
        if (!activeTabContent) {
            console.log('Active tab content not found.');
            return
        }

        const formActionBaseURL = 'https://moto-m5.myshopify.com/collections/';

        let formAction = `${formActionBaseURL}opony`; // Default action
        switch (activeSubTabNumber) {
            case '2':
                formAction = `${formActionBaseURL}kola`;
                break;
            case '3':
                formAction = `${formActionBaseURL}felgi`;
                break;
        }

        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        if (submitButton) {
            manageSelect(submitButton, [], false); // Initially disable the submit button
        }

        if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-1')) {
            // "Search by Size"
            initializeSizeForm(activeTabContent, activeSubTabNumber, formAction);
        } else if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-2')) {
            // "Search by Car"
            initializeCarForm(activeTabContent, activeSubTabNumber, formAction);
        }
    }

    // Listen for tab changes to re-initialize form for the active tab
    document.querySelectorAll('.tab-link-top-search, .tab-link-left-search, .tab-link-tab-2').forEach(tab => {
        tab.addEventListener('click', () => {
            setTimeout(activateFormInitialization, 150);
        });
    });

    activateFormInitialization(); // Initialize the form for the currently active tab on page load
});
