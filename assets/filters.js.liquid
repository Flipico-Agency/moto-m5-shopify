document.addEventListener('DOMContentLoaded', async function() {
    const baseURL = 'https://api.wheel-size.com/v2';
    const userKey = '8608442fd845888bda065b97c8d141d9';

    const formElements = {
        widths: document.getElementById('tire-width'),
        profiles: document.getElementById('tire-profile'),
        diameters: document.getElementById('tire-diameter'),
        submitButton: document.getElementById('tire-submit')
    };

    async function fetchData(endpoint, params) {
        const url = new URL(`${baseURL}/${endpoint}`);
        url.search = new URLSearchParams({ user_key: userKey, ...params }).toString();
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return await response.json();
    }

    function populateSelect(element, data, placeholder = false) {
        element.innerHTML = placeholder ? `<option value="">Wybierz...</option>` : '';
        data.forEach(item => {
            const option = new Option(item.value, item.value);
            element.add(option);
        });
    }

    function updateFormState() {
        const allSelected = Object.values(formElements).slice(0, 3).every(select => select.value);
        setElementAvailability(formElements.submitButton, allSelected);
        return allSelected;
    }

    function setElementAvailability(element, isEnabled) {
        element.disabled = !isEnabled;

        // Ustawianie stylów tylko dla przycisku submit
        if (element === formElements.submitButton) {
            element.style.pointerEvents = isEnabled ? 'auto' : 'none';
            element.style.opacity = isEnabled ? '1' : '0.5';
        }
        // Ustawianie stylów dla pozostałych elementów formularza
        else {
            const parentDiv = element.parentElement;
            if (parentDiv) {
                parentDiv.style.pointerEvents = isEnabled ? 'auto' : 'none';
                parentDiv.style.opacity = isEnabled ? '1' : '0.5';
            }
            // Czyść zawartość selecta jeśli jest wyłączony
            if (!isEnabled) element.innerHTML = '';
        }
    }

    async function initializeSelects() {
        const widthsData = await fetchData('by_tire/sw/', { region: 'eudm' });
        populateSelect(formElements.widths, widthsData.data);
        const profilesData = await fetchData('by_tire/ar/', { section_width: formElements.widths.value, region: 'eudm' });
        populateSelect(formElements.profiles, profilesData.data);
        const diametersData = await fetchData('by_tire/rd/', { section_width: formElements.widths.value, aspect_ratio: formElements.profiles.value, region: 'eudm' });
        populateSelect(formElements.diameters, diametersData.data);
        updateFormState();
    }

    formElements.widths.addEventListener('change', async () => {
        if (formElements.widths.value) {
            const data = await fetchData('by_tire/ar/', { section_width: formElements.widths.value, region: 'eudm' });
            populateSelect(formElements.profiles, data.data, true);
            setElementAvailability(formElements.profiles, true);
            setElementAvailability(formElements.diameters, false);
        }
        updateFormState();
    });

    formElements.profiles.addEventListener('change', async () => {
        if (formElements.profiles.value) {
            const data = await fetchData('by_tire/rd/', { section_width: formElements.widths.value, aspect_ratio: formElements.profiles.value, region: 'eudm' });
            populateSelect(formElements.diameters, data.data, true);
            setElementAvailability(formElements.diameters, true);
        }
        updateFormState();
    });

    formElements.diameters.addEventListener('change', updateFormState);

    formElements.submitButton.form.addEventListener('submit', function(event) {
        event.preventDefault();
        if (updateFormState()) {
            const manufacturerGID = formElements.submitButton.getAttribute('data-manufacturer-gid');
            const seasonTire = document.getElementById('tire-season').value;
            const queryParameters = {
                'filter.p.m.tires.manufacturer': encodeURIComponent(manufacturerGID),
                'filter.p.m.tires.width': formElements.widths.value,
                'filter.p.m.tires.profile': formElements.profiles.value,
                'filter.p.m.tires.diameter': formElements.diameters.value,
                'filter.p.m.tires.season': seasonTire
            };
            const queryString = Object.keys(queryParameters).map(key => `${key}=${queryParameters[key]}`).join('&');
            window.location.href = `https://moto-m5.myshopify.com/collections/opony?${queryString}`;
        }
    });

    await initializeSelects();
});
