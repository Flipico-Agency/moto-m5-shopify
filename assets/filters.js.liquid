document.addEventListener('DOMContentLoaded', function() {
    const baseURL = 'https://api.wheel-size.com/v2';
    const userKey = '8608442fd845888bda065b97c8d141d9';

    const formElements = {
        widths: document.getElementById('widths'),
        profiles: document.getElementById('profile'),
        diameters: document.getElementById('tire-diameter'),
        submitButton: document.getElementById('submit_tire')
    };

    // Uniwersalna funkcja do fetchowania danych
    async function fetchData(endpoint, params) {
        const url = new URL(`${baseURL}/${endpoint}`);
        url.search = new URLSearchParams(Object.assign({ user_key: userKey }, params)).toString();

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error('Fetch error: ', error);
        }
    }

    // Uniwersalna funkcja do aktualizacji selectów
    function populateSelect(element, data, clear = true) {
        if (clear) element.innerHTML = '';
        data.forEach(item => {
            const option = new Option(item.value, item.value);
            element.add(option);
        });
        updateFormState();
    }

    // Zarządzanie stanem formularza
    function updateFormState() {
        const allSelected = Object.values(formElements).slice(0, 3).every(select => select.value);
        setElementAvailability(formElements.submitButton, allSelected);

        if (!formElements.widths.value) {
            setElementAvailability(formElements.profiles, false);
            setElementAvailability(formElements.diameters, false);
        }
    }

    // Ustawianie dostępności elementu
    function setElementAvailability(element, isEnabled) {
        element.disabled = !isEnabled;
        element.parentElement.style.pointerEvents = isEnabled ? 'auto' : 'none';
        element.parentElement.style.opacity = isEnabled ? '1' : '0.5';
        if (!isEnabled) element.innerHTML = '';
    }

    // Obsługa zmian w selectach
    function handleSelectChange() {
        const { widths, profiles, diameters } = formElements;
        if (this === widths && widths.value) {
            fetchData('by_tire/ar', { section_width: widths.value, region: 'eudm' })
                .then(data => populateSelect(profiles, data.data));
        } else if (this === profiles && profiles.value) {
            fetchData('by_tire/rd', { section_width: widths.value, aspect_ratio: profiles.value, region: 'eudm' })
                .then(data => populateSelect(diameters, data.data));
        }
        updateFormState();
    }

    // Inicjalizacja selectów
    fetchData('by_tire/sw', {})
        .then(data => populateSelect(formElements.widths, data.data, false));

    // Przypisanie nasłuchiwaczy zdarzeń
    Object.values(formElements).slice(0, 3).forEach(select => {
        select.addEventListener('change', handleSelectChange);
    });

    // Obsługa wysyłania formularza
    formElements.submitButton.form.addEventListener('submit', function(event) {
        event.preventDefault();
        if (updateFormState()) {
            const manufacturerGID = formElements.submitButton.getAttribute('data-manufacturer-gid');
            const seasonTire = document.getElementById('season-tire').value;
            const queryParameters = {
                'filter.p.m.tires.manufacturer': encodeURIComponent(manufacturerGID),
                'filter.p.m.tires.width': formElements.widths.value,
                'filter.p.m.tires.profile': formElements.profiles.value,
                'filter.p.m.tires.diameter': formElements.diameters.value,
                'filter.p.m.tires.season': seasonTire
            };
            const queryString = Object.keys(queryParameters)
                .map(key => `${key}=${queryParameters[key]}`).join('&');
            window.location.href = `https://moto-m5.myshopify.com/collections/opony?${queryString}`;
        }
    });

    setElementAvailability(formElements.profiles, false);
    setElementAvailability(formElements.diameters, false);
    updateFormState();
});



