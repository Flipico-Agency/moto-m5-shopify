document.addEventListener('DOMContentLoaded', async function () {
    const baseURL = 'https://api.wheel-size.com/v2';
    const userKey = '8608442fd845888bda065b97c8d141d9';

    async function fetchData(endpoint, params) {
        const url = new URL(`${baseURL}/${endpoint}`);
        url.search = new URLSearchParams({ user_key: userKey, ...params }).toString();

        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
    }

    function manageSelect(element, options = [], isEnabled = true, placeholder = "Wybierz...") {
        if (!element) return;

        element.innerHTML = isEnabled && placeholder ? `<option value="">${placeholder}</option>` : '';
        if (isEnabled) {
            options.forEach((option, index) => {
                let optionDisplayValue;
                let optionActualValue;

                if (element.dataset.name === 'car-generacja') {
                    optionDisplayValue = option.name !== '' ? option.name : index + 1;
                    optionActualValue = option.slug;
                } else if (element.dataset.name === 'car-silnik') {
                    optionDisplayValue = `${option.name} (${option.engine.power.PS} KM, ${option.engine.power.kW} kW)`;
                    optionActualValue = option.slug;
                } else {
                    optionDisplayValue = option.name || option.value;
                    optionActualValue = option.value || option.slug;
                }

                element.add(new Option(optionDisplayValue, optionActualValue));
            });
        }

        element.disabled = !isEnabled;
        const styleProps = { pointerEvents: isEnabled ? 'auto' : 'none', opacity: isEnabled ? '1' : '0.5' };
        Object.assign(element.style, styleProps);

        const parentDiv = element.closest('.form-field-wrapper');
        if (parentDiv) Object.assign(parentDiv.style, styleProps);
    }

    function mapSelectNameToApiParam(selectName) {
        const mapping = {
            // Map for tires and rims
            'tire-width': 'section_width',
            'tire-profile': 'aspect_ratio',
            'tire-diameter': 'rim_diameter',
            'rim-bolt': 'bolt_pattern',
            'rim-width': 'rim_width',
            'rim-diameter': 'rim_diameter',

            // Map for cars
            'car-marka': 'make',
            'car-model': 'model',
            'car-generacja': 'generation',
            'car-rok': 'year',
            'car-silnik': 'modification'
        };
        return mapping[selectName] || selectName;
    }

    function mapSelectNameToURLParam(selectName) {
        const mapping = {
            // Map for tires and rims
            'tire-width': 'filter.p.m.tires.width',
            'tire-profile': 'filter.p.m.tires.profile',
            'tire-diameter': 'filter.p.m.tires.diameter',
            'tire-season': 'filter.p.m.tires.season',
            'rim-bolt': 'filter.p.m.rims.bolt_spacing',
            'rim-width': 'filter.p.m.rims.width',
            'rim-diameter': 'filter.p.m.rims.diameter',
            'rim-et': 'filter.p.m.rims.e_t',

            // Map for cars
            'car-marka': 'filter.p.m.car.make',
            'car-model': 'filter.p.m.car.model',
            'car-generacja': 'filter.p.m.car.generation',
            'car-silnik': 'filter.p.m.car.engine'
        };
        return mapping[selectName] || selectName;
    }

    async function initializeSelects(activeTabContent, elements, fetchDataEndpoints, urlParams, type) {
        let selectedValues = {};

        for (let i = 0; i < elements.length; i++) {
            const elementName = elements[i];
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);
            {% comment %}console.log(`Processing selector: ${elementName}`);{% endcomment %}

            if (!selectElement) continue;

            const apiParam = mapSelectNameToApiParam(elementName);
            const fetchDataParams = { region: 'eudm' };

            const urlParamKey = mapSelectNameToURLParam(elementName);
            const urlParamValue = urlParams.get(urlParamKey);

            if (urlParamValue) {
                selectedValues[apiParam] = urlParamValue;
            }

            // Copy relevant selectedValues into fetchDataParams
            Object.keys(selectedValues).forEach(key => {
                if (key !== apiParam && typeof selectedValues[key] === 'string') {
                    fetchDataParams[key] = selectedValues[key];
                } else if (key !== apiParam && typeof selectedValues[key] === 'object' && selectedValues[key].slug) {
                    fetchDataParams[key] = selectedValues[key].slug;
                }
            });

            if (elementName === 'tire-season') {
                //const seasons = ['Letnie', 'Zimowe', 'Całoroczne'];
                //manageSelect(selectElement, seasons.map(season => ({ name: season, value: season })), true);
                if (urlParamValue) {
                    selectElement.value = urlParamValue;
                } else {
                    //selectElement.value = 'Letnie'; // Default
                }
            } else if (apiParam && fetchDataEndpoints[elementName]) {
                {% comment %}console.log(`Sending API request for ${elementName} with params:`, fetchDataParams);{% endcomment %}
                const data = await fetchData(fetchDataEndpoints[elementName], fetchDataParams);
                {% comment %}console.log(`Received API data for ${elementName}:`, data);{% endcomment %}

                if (data && data.data) {
                    manageSelect(selectElement, data.data, true);

                    if (!selectElement.value && data.data.length > 0) {
                        if (type === 'bySize') {
                            selectElement.value = urlParamValue ? urlParamValue : data.data[0].value ? data.data[0].value : data.data[0].slug;
                        } else if (type === 'byCar') {
                            let foundItem;
                            switch (i) {
                                case 0:
                                    foundItem = data.data.find(item => item.name === "BMW");
                                    break;
                                case 1:
                                    foundItem = data.data.find(item => item.name === "M5");
                                    break;
                                case 2:
                                    foundItem = data.data.find(item => item.slug === "96a0cc2f93");
                                    break;
                                case 4:
                                    foundItem = data.data.find(item => item.name === "M5 Competition");
                                    break;
                            }
                            if (foundItem) {
                                selectElement.value = urlParamValue ? urlParamValue : foundItem.value ? foundItem.value : foundItem.slug;
                            }
                        }
                    }

                    if (elementName === 'car-generacja') {
                        const selectedItem = data.data.find(item => item.slug === selectElement.value);
                        selectedValues[apiParam] = selectedItem;

                        if (selectedItem && selectedItem.year_ranges) {
                            const years = selectedItem.year_ranges.flatMap(range => {
                                const [start, end] = range.split('-').map(Number);
                                return Array.from({ length: end - start + 1 }, (_, k) => start + k);
                            });

                            if (years.length > 0) {
                                manageSelect(activeTabContent.querySelector(`select[data-name="car-rok"]`), years.map(year => ({ name: year, value: year })), true);
                            }
                        }
                    } else {
                        selectedValues[apiParam] = selectElement.value;
                    }
                }
            } else if (elementName === 'car-rok' && selectedValues['generation']) {
                const generation = selectedValues['generation'];
                const years = generation.year_ranges.flatMap(range => {
                    const [start, end] = range.split('-').map(Number);
                    return Array.from({ length: end - start + 1 }, (_, k) => start + k);
                });

                manageSelect(selectElement, years.map(year => ({ name: year, value: year })), true);
                if (years.length > 0) {
                    selectElement.value = years[0];
                }
                selectedValues['year'] = selectElement.value;
            } else {
                manageSelect(selectElement, [], false);
            }
        }
    }

    let generationsData = {};

    function setupEventListeners(activeTabContent, elements, fetchDataEndpoints) {
        elements.forEach((elementName, index) => {
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);

            selectElement.addEventListener('change', async () => {
                checkFormCompleteAndManageSubmitButton(activeTabContent, elements);

                // Resetowanie następnych selectów
                elements.slice(index + 1).forEach(name => {
                    if (name !== 'tire-season') {
                        const nextSelect = activeTabContent.querySelector(`select[data-name="${name}"]`);
                        manageSelect(nextSelect, [], false);
                    }
                });

                if (elementName === 'car-generacja') {
                    // Bezpośrednia aktualizacja selektora roku na podstawie wybranej generacji
                    const years = generationsData[selectElement.value]; // Pobierz lata na podstawie wybranej generacji
                    const yearSelectElement = activeTabContent.querySelector(`select[data-name="car-rok"]`);
                    if (years) {
                        manageSelect(yearSelectElement, years.map(year => ({ name: year, value: year })), true);
                    } else {
                        manageSelect(yearSelectElement, [], false); // W przypadku braku informacji o latach, wyłącz selektor roku
                    }
                } else if (index < elements.length - 1) {
                    const nextElementName = elements[index + 1];
                    const nextSelectElement = activeTabContent.querySelector(`select[data-name="${nextElementName}"]`);

                    if (nextSelectElement && elementName !== 'tire-season' && nextElementName !== 'tire-season') {
                        const fetchDataParams = { region: 'eudm' };
                        // Ustawienie parametrów dla API na podstawie wcześniej wybranych wartości
                        elements.slice(0, index + 1).forEach(prevName => {
                            const prevSelect = activeTabContent.querySelector(`select[data-name="${prevName}"]`);
                            const prevApiParam = mapSelectNameToApiParam(prevName);
                            if (prevSelect && prevSelect.value) fetchDataParams[prevApiParam] = prevSelect.value;
                        });

                        // Wywołanie API i aktualizacja selektora
                        const data = await fetchData(fetchDataEndpoints[nextElementName], fetchDataParams);
                        if (data && data.data) {
                            if (elementName === 'car-model') {
                                // Zapisz informacje o generacjach
                                generationsData = data.data.reduce((acc, curr) => {
                                    acc[curr.slug] = curr.years;
                                    return acc;
                                }, {});
                            }
                            manageSelect(nextSelectElement, data.data, true);
                        } else {
                            manageSelect(nextSelectElement, [], false);
                        }
                    }
                }
            });
        });
    }

    async function fetchManufacturerId(manufacturerHandle) {
        {% comment %}
        try {
            const makeURL = 'https://hook.eu2.make.com/8dxnlvq5gkmye46t456qralta2hv5wxu';

            const requestData = JSON.stringify({
                query: `{ metaobjectByHandle(handle: {type: "brand_page_tires", handle: "${manufacturerHandle}"}) { id } }`
            });

            const response = await fetch(makeURL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: requestData
            });

            const json = await response.json();
            return json.data.metaobjectByHandle ? json.data.metaobjectByHandle.id : null;
        } catch (error) {
            console.error('Error fetching manufacturer ID:', error);
            return null;
        }
        {% endcomment %}
        return document.getElementById('submit-manufacturer-form').getAttribute('data-model-gid');
    }

    async function buildSizeQueryParameters(activeSubTabNumber, tire, rim, isCollectionsPage) {
        const queryParams = new URLSearchParams();
        const pathSegments = window.location.pathname.split('/');
        let manufacturerHandle = '';

        // Find the index of the segment that starts with "opony" or "opony-"
        const tireSegmentIndex = pathSegments.findIndex(segment => segment === 'opony' || segment.startsWith('opony-'));

        // If found, and there is another segment after this, assign it as a manufacturer handle
        if (tireSegmentIndex !== -1 && pathSegments.length > tireSegmentIndex + 1) {
            manufacturerHandle = pathSegments[tireSegmentIndex + 1];
        }

        // Base parameters for tires are always included in subtabs 1 and 2
        if (activeSubTabNumber === '1' || activeSubTabNumber === '2') {
            queryParams.set('filter.p.m.tires.width', tire.width.value);
            queryParams.set('filter.p.m.tires.profile', tire.profile.value);
            queryParams.set('filter.p.m.tires.diameter', tire.diameter.value);

            // Add season parameter only if not on collection page
            if (!isCollectionsPage) {
                queryParams.set('filter.p.m.tires.season', tire.season.value);
            }

            if (manufacturerHandle) {
                const manufacturerId = await fetchManufacturerId(manufacturerHandle);
                if (manufacturerId) {
                    queryParams.set('filter.p.m.tires.manufacturer', manufacturerId);
                }
            }

            // Check for 'opony-run-flat' in the path segments
            if (pathSegments.includes('opony-run-flat')) {
                queryParams.set('filter.p.m.tires.additional_information', 'Run+flat');
            }

            // Check for 'pages/opony' but not 'opony-run-flat' in the path segments
            if (pathSegments.includes('pages') && pathSegments.includes('opony') && !pathSegments.includes('opony-run-flat')) {
                queryParams.set('filter.p.m.custom.type', 'Osobowe');
            }
        }

        // For subtab 2, include rim parameters along with base tire parameters
        if (activeSubTabNumber === '2') {
            queryParams.set('filter.p.m.rims.bolt_spacing', rim.bolt.value);
            queryParams.set('filter.p.m.rims.width', rim.width.value);
        }

        // For subtab 3, only include rim parameters
        if (activeSubTabNumber === '3') {
            queryParams.set('filter.p.m.rims.diameter', rim.diameter.value);
            queryParams.set('filter.p.m.rims.bolt_spacing', rim.bolt.value);
            queryParams.set('filter.p.m.rims.width', rim.width.value);
            queryParams.set('filter.p.m.rims.e_t', rim.et.value);

            // Handle a special materials case
            if (pathSegments[2] && (pathSegments[2] === 'felgi-aluminiowe' || pathSegments[2] === 'felgi-stalowe')) {
                let material = pathSegments[2].slice(6);
                queryParams.set('filter.p.m.rims.material', material.charAt(0).toUpperCase() + material.slice(1));
            }
        }

        return queryParams;
    }

    function buildCarQueryParameters(activeTabContent, elements, urlParams) {
        let queryParams = {};

        elements.forEach(element => {
            const selectElement = activeTabContent.querySelector(`select[data-name="${element}"]`);
            if (selectElement && selectElement.value) {
                const urlParamKey = mapSelectNameToURLParam(element);
                queryParams[urlParamKey] = selectElement.value;
            }
        });

        for (const [key, value] of urlParams.entries()) {
            if (!queryParams.hasOwnProperty(key) && value) {
                queryParams[key] = value;
            }
        }

        return queryParams;
    }

    function checkFormCompleteAndManageSubmitButton(activeTabContent, elements) {
        const allSelected = elements.every(elementName => {
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);
            return selectElement && selectElement.value;
        });
        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        manageSelect(submitButton, [], allSelected);
    }

    async function initializeSizeForm(activeTabContent, activeSubTabNumber, formAction) {
        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        const urlParams = new URLSearchParams(window.location.search);

        const tireElements = ['tire-width', 'tire-profile', 'tire-diameter', 'tire-season'];
        const rimElements = ['rim-diameter', 'rim-bolt', 'rim-width', 'rim-et'];
        const wheelElements = ['tire-width', 'tire-profile', 'tire-diameter', 'rim-bolt', 'rim-width', 'tire-season'];
        const fetchDataEndpoints = {
            'tire-width': 'by_tire/sw/', 'tire-profile': 'by_tire/ar/', 'tire-diameter': 'by_tire/rd/',
            'rim-diameter': 'by_rim/rd/', 'rim-bolt': 'by_rim/bp/', 'rim-width': 'by_rim/rw/', 'rim-et': 'by_rim/of/'
        };

        // Construct tire and rim objects with corresponding select elements
        const tire = {
            width: activeTabContent.querySelector(`select[data-name="tire-width"]`),
            profile: activeTabContent.querySelector(`select[data-name="tire-profile"]`),
            diameter: activeTabContent.querySelector(`select[data-name="tire-diameter"]`),
            season: activeTabContent.querySelector(`select[data-name="tire-season"]`)
        };
        const rim = {
            diameter: activeTabContent.querySelector(`select[data-name="rim-diameter"]`),
            bolt: activeTabContent.querySelector(`select[data-name="rim-bolt"]`),
            width: activeTabContent.querySelector(`select[data-name="rim-width"]`),
            et: activeTabContent.querySelector(`select[data-name="rim-et"]`)
        };

        // Initialize select elements based on the active sub-tab
        const elementsToInitialize = activeSubTabNumber === '1' ? tireElements : activeSubTabNumber === '2' ? wheelElements : rimElements;

        // Check if the current pathname is '/collections'
        const isCollectionsPage = window.location.pathname.includes('/collections');

        // If we're on the '/collections' page, remove 'tire-season' from the elements to initialize
        const finalElementsToInitialize = isCollectionsPage ? elementsToInitialize.filter(element => element !== 'tire-season') : elementsToInitialize;

        await initializeSelects(activeTabContent, finalElementsToInitialize, fetchDataEndpoints, urlParams, 'bySize');
        setupEventListeners(activeTabContent, finalElementsToInitialize, fetchDataEndpoints);
        checkFormCompleteAndManageSubmitButton(activeTabContent, finalElementsToInitialize);

        const form = submitButton.form;
        form.addEventListener('submit', async event => {
            event.preventDefault();
            localStorage.setItem('searchBy', 'bySize');

            // Clone the existing URL parameters to preserve them
            const queryParams = new URLSearchParams(urlParams);

            // Build query parameters based on the active sub-tab and selected options
            const newParams = await buildSizeQueryParameters(activeSubTabNumber, tire, rim, isCollectionsPage);

            // Append new parameters to the existing ones
            for (const [key, value] of newParams.entries()) {
                queryParams.set(key, value);
            }

            if (queryParams.has('filter.v.rims.e_t.gte') || queryParams.has('filter.v.rims.e_t.lte')) {
                queryParams.delete('filter.v.rims.e_t.gte');
                queryParams.delete('filter.v.rims.e_t.lte');
            }

            window.location.href = `${formAction}?${queryParams.toString().replace('%2B', '+')}`;
        });
    }

    async function initializeCarForm(activeTabContent, activeSubTabNumber, formAction) {
        let searchByModel;

        // Helper function to format tire size correctly
        const formatRimSize = (rim) => {
            return rim ? `${rim}` : 'Brak danych o feldze';
        };

        const formatTireSize = (tireSize) => {
            return tireSize ? tireSize.replace(/(\d+)\/(\d+)[A-Z]*/g, '$1/$2/R') : 'Brak danych o oponach';
        };

        // Helper function to create option element for tires, rims, wheels
        const createOption = (prefix) => {
            const sizeRegex = /(\d+\/\d+\/[RZ]\d+)|((\d+\.?\d*)Jx(\d+\.?\d*) ET(\d+\.?\d*))/g;
            const matchSizes = [...prefix.matchAll(sizeRegex)];
            const sizes = matchSizes.map(match => match[0]).join(" ");

            const option = document.createElement("option");
            option.text = prefix.trim();
            option.value = sizes;
            return option;
        };

        // Generic function to update select options for tires and rims
        const updateMatchingSizeOptions = async (filterKey) => {
            const currentData = searchByModel;
            const selectMatchingSize = document.getElementById(`${filterKey}`);
            selectMatchingSize.innerHTML = "";

            if (currentData && Array.isArray(currentData)) {
                let pairIndex = 1;
                const uniquePairCombos = new Set();

                currentData[0].wheels.forEach((item) => {
                    const frontTireFormatted = formatTireSize(item.front.tire);
                    const rearTireFormatted = item.rear.tire ? formatTireSize(item.rear.tire) : frontTireFormatted;
                    const frontRimFormatted = formatRimSize(item.front.rim);
                    const rearRimFormatted = item.rear.rim ? formatRimSize(item.rear.rim) : frontRimFormatted;

                    // Check if the front and rear have the same tires and rims
                    const identicalTiresAndRims = frontTireFormatted === rearTireFormatted && frontRimFormatted === rearRimFormatted;

                    let optionTextFront, optionTextRear;
                    if (window.location.pathname.includes('collections/opony')) {
                        optionTextFront = `${frontTireFormatted}`;
                        optionTextRear = `${rearTireFormatted}`;
                    } else if (window.location.pathname.includes('collections/felgi')) {
                        optionTextFront = `${frontRimFormatted}`;
                        optionTextRear = `${rearRimFormatted}`;
                    } else { // for wheels
                        optionTextFront = `Opona: ${frontTireFormatted}, Felga: ${frontRimFormatted}`;
                        optionTextRear = `Opona: ${rearTireFormatted}, Felga: ${rearRimFormatted}`;
                    }

                    if (identicalTiresAndRims) {
                        if (!uniquePairCombos.has(optionTextFront + optionTextRear)) {
                            uniquePairCombos.add(optionTextFront + optionTextRear);
                            selectMatchingSize.add(createOption(`Komplet ${pairIndex} (Przód i tył): ${optionTextFront}`));
                        }
                    } else {
                        selectMatchingSize.add(createOption(`Komplet ${pairIndex} (Przód): ${optionTextFront}`));
                        selectMatchingSize.add(createOption(`Komplet ${pairIndex} (Tył): ${optionTextRear}`));
                    }

                    pairIndex++;
                });

                selectMatchingSize.selectedIndex = 0;
            } else {
                console.error(`Invalid or empty data for filter_${filterKey}.`);
            }
        };

        if(window.location.pathname.includes('collections')) {
            // Selected car logic
            const savedCar = JSON.parse(localStorage.getItem('selectedCar'));
            if (savedCar) {
                searchByModel = savedCar;
                document.querySelector('.ifnotselectedcar').style.display = 'none';
                document.querySelector('.ifselectedcar').style.display = 'flex';
                await updateMatchingSizeOptions("matching_sizes");
                const carInfo = searchByModel[0];
                document.getElementById('selected_car').textContent = `${carInfo.make.name} ${carInfo.model.name} ${carInfo.generation.name} ${carInfo.trim} (${carInfo.engine.power.PS} PS, ${carInfo.engine.power.kW} kW) (${carInfo.start_year}-${carInfo.end_year})`;
            } else {
                document.querySelector('.ifnotselectedcar').style.display = 'flex';
                document.querySelector('.ifselectedcar').style.display = 'none';
            }

            document.getElementById('change_car').addEventListener("click", function() {
                searchByModel = undefined;
                document.querySelector('.ifnotselectedcar').style.display = 'flex';
                document.querySelector('.ifselectedcar').style.display = 'none';
            });
        }

        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        const urlParams = new URLSearchParams(window.location.search);

        const elements = ['car-marka', 'car-model', 'car-generacja', 'car-rok', 'car-silnik'];
        const fetchDataEndpoints = {
            'car-marka': 'makes/',
            'car-model': 'models/',
            'car-generacja': 'generations/',
            'car-silnik': 'modifications/'
        };

        await initializeSelects(activeTabContent, elements, fetchDataEndpoints, urlParams, 'byCar');
        setupEventListeners(activeTabContent, elements, fetchDataEndpoints);
        checkFormCompleteAndManageSubmitButton(activeTabContent, elements);

        const form = submitButton.form;
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            localStorage.setItem('searchBy', 'byCar');

            const fetchAndProcessData = () => {
                const allElementsForFetch = elements.reduce((acc, element) => {
                    const selectElement = activeTabContent.querySelector(`select[data-name="${element}"]`);
                    if (selectElement && selectElement.value) {
                        const apiParam = mapSelectNameToApiParam(element);
                        acc[apiParam] = selectElement.value;
                    }
                    return acc;
                }, {});

                fetchData('search/by_model/', allElementsForFetch).then(data => {
                    searchByModel = data.data;

                    if (searchByModel && searchByModel.length > 0) {
                        localStorage.setItem('selectedCar', JSON.stringify(searchByModel));
                        processSearchByModel();
                    }
                });
            };

            const processSearchByModel = () => {
                if (!window.location.pathname.includes('collections')) {
                    const queryParamsObject = buildCarQueryParameters(activeTabContent, elements, new URLSearchParams(window.location.search));
                    const queryParams = new URLSearchParams(queryParamsObject);

                    // Check for 'opony-run-flat' in the path segments
                    const pathSegments = window.location.pathname.split('/');
                    if (pathSegments.includes('opony-run-flat')) {
                        queryParams.set('filter.p.m.tires.additional_information', 'Run+flat');
                    }

                    // Check for 'pages/opony' but not 'opony-run-flat' in the path segments
                    if (pathSegments.includes('pages') && pathSegments.includes('opony') && !pathSegments.includes('opony-run-flat')) {
                        queryParams.set('filter.p.m.custom.type', 'Osobowe');
                    }

                    // Handle a special materials case
                    if (pathSegments[2] && (pathSegments[2] === 'felgi-aluminiowe' || pathSegments[2] === 'felgi-stalowe')) {
                        let material = pathSegments[2].slice(6);
                        queryParams.set('filter.p.m.rims.material', material.charAt(0).toUpperCase() + material.slice(1));
                    }

                    const queryString = queryParams.toString();
                    window.location.href = `${formAction}?${queryString}`;
                } else {
                    if (searchByModel === undefined) {
                        document.querySelector('.ifnotselectedcar').style.display = 'none';
                        document.querySelector('.ifselectedcar').style.display = 'flex';
                        fetchAndProcessData();
                    } else {
                        updateMatchingSizeAndRedirect();
                    }
                }
            };

            const updateMatchingSizeAndRedirect = () => {
                const selectedOption = document.getElementById('matching_sizes').value;
                const currentUrlParams = new URLSearchParams(window.location.search);

                if (window.location.pathname.includes('collections/opony')) {
                    const tireMatch = selectedOption.match(/(\d+)\/(\d+)\/R(\d+)/);
                    if (tireMatch) {
                        const [_, tireWidth, tireProfile, tireDiameter] = tireMatch;
                        currentUrlParams.set('filter.p.m.tires.width', tireWidth);
                        currentUrlParams.set('filter.p.m.tires.profile', tireProfile);
                        currentUrlParams.set('filter.p.m.tires.diameter', tireDiameter);
                    }
                } else if (window.location.pathname.includes('collections/felgi')) {
                    const rimMatch = selectedOption.match(/(\d+\.?\d*)Jx(\d+\.?\d*) ET(\d+)/);
                    if (rimMatch) {
                        const [_, rimWidth, rimDiameter, rimOffset] = rimMatch;
                        currentUrlParams.set('filter.p.m.rims.width', rimWidth);
                        currentUrlParams.set('filter.p.m.rims.diameter', rimDiameter);
                        currentUrlParams.set('filter.v.rims.e_t.gte', (parseFloat(rimOffset) - 5).toFixed(1));
                        currentUrlParams.set('filter.v.rims.e_t.lte', (parseFloat(rimOffset) + 5).toFixed(1));
                        currentUrlParams.delete('filter.p.m.rims.e_t');
                    }
                } else if (window.location.pathname.includes('collections/kola')) {
                    const tireMatch = selectedOption.match(/(\d+)\/(\d+)\/R(\d+)/);
                    const rimMatch = selectedOption.match(/(\d+\.?\d*)Jx(\d+\.?\d*) ET(\d+)/);
                    if (tireMatch && rimMatch) {
                        const [_, tireWidth, tireProfile, tireDiameter] = tireMatch;
                        const [__, rimWidth, rimDiameter, rimOffset] = rimMatch;
                        currentUrlParams.set('filter.p.m.tires.width', tireWidth);
                        currentUrlParams.set('filter.p.m.tires.profile', tireProfile);
                        currentUrlParams.set('filter.p.m.tires.diameter', tireDiameter);
                        currentUrlParams.set('filter.p.m.rims.width', rimWidth);
                        currentUrlParams.set('filter.p.m.rims.diameter', rimDiameter);
                        currentUrlParams.set('filter.v.rims.e_t.gte', (parseFloat(rimOffset) - 5).toFixed(1));
                        currentUrlParams.set('filter.v.rims.e_t.lte', (parseFloat(rimOffset) + 5).toFixed(1));
                        currentUrlParams.delete('filter.p.m.rims.e_t');
                    }
                }

                if (currentUrlParams.toString()) {
                    window.location.href = `${window.location.pathname}?${currentUrlParams.toString()}`;
                } else {
                    console.error('Matching size format is incorrect:', selectedOption);
                }
            };

            if (!window.location.pathname.includes('collections') || searchByModel === undefined) {
                fetchAndProcessData();
            } else {
                updateMatchingSizeAndRedirect();
            }
        });
    }

    function getActiveTabInfo() {
        const activePage = window.location.pathname;
        let activeTabContent;
        let activeSubTabNumber = null;

        const pathToSubTabNumber = {
            '/collections/opony': '1',
            '/pages/opony': '1',
            '/collections/kola': '2',
            '/pages/kola': '2',
            '/collections/felgi': '3',
            '/pages/felgi': '3'
        };

        if (activePage === '/') {
            activeTabContent = document.querySelector('.w-tab-pane.w--tab-active > div > div.w-tab-pane.w--tab-active');
            const activeSubTab = document.querySelector('.tab-link-left-search.w--current');
            if (activeSubTab) {
                activeSubTabNumber = activeSubTab.getAttribute('data-w-tab').split('.')[1];
            }
        } else {
            if (activePage.includes('/pages/')) {
                activeTabContent = document.querySelector('div[data-w-tab].w-tab-pane.w--tab-active');
                for (const [path, subTabNumber] of Object.entries(pathToSubTabNumber)) {
                    if (activePage.includes(path)) {
                        activeSubTabNumber = subTabNumber;
                        break;
                    }
                }
            } else if (activePage.includes('/collections/')) {
                activeTabContent = document.querySelector('div[data-sub-tab].w-tab-pane.w--tab-active');
                activeSubTabNumber = pathToSubTabNumber[activePage] || null;
            }
        }

        return { activeTabContent, activeSubTabNumber };
    }

    function activateFormInitialization() {
        const { activeTabContent, activeSubTabNumber } = getActiveTabInfo();
        if (!activeTabContent) {
            console.log('Active tab content not found.');
            return
        }

        const formActionBaseURL = 'https://moto-m5.myshopify.com/collections/';

        let formAction = `${formActionBaseURL}opony`; // Default action
        switch (activeSubTabNumber) {
            case '2':
                formAction = `${formActionBaseURL}kola`;
                break;
            case '3':
                formAction = `${formActionBaseURL}felgi`;
                break;
        }

        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        if (submitButton) {
            manageSelect(submitButton, [], false); // Initially disable the submit button
        }

        if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-1')) {
            // "Search by Size"
            initializeSizeForm(activeTabContent, activeSubTabNumber, formAction);
        } else if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-2')) {
            // "Search by Car"
            initializeCarForm(activeTabContent, activeSubTabNumber, formAction);
        }
    }

    // Listen for tab changes to re-initialize form for the active tab
    document.querySelectorAll('.tab-link-top-search, .tab-link-left-search, .tab-link-tab-2').forEach(tab => {
        tab.addEventListener('click', () => {
            setTimeout(activateFormInitialization, 150);
        });
    });

    activateFormInitialization(); // Initialize the form for the currently active tab on page load
});
