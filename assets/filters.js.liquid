document.addEventListener('DOMContentLoaded', async function () {
    const baseURL = 'https://api.wheel-size.com/v2';
    const userKey = '8608442fd845888bda065b97c8d141d9';

    async function fetchData(endpoint, params) {
        const url = new URL(`${baseURL}/${endpoint}`);
        url.search = new URLSearchParams({user_key: userKey, ...params}).toString();
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return await response.json();
    }

    function manageSelect(element, data = [], isEnabled = true, placeholder = "Wybierz...") {
        if (!element) return;

        const isSelect = element.tagName === 'SELECT';
        const isSubmit = element.type === 'submit';
        const parentDiv = isSelect ? element.closest('.form-field-wrapper') : null;

        if (isSelect) {
            element.innerHTML = isEnabled && placeholder ? `<option value="">${placeholder}</option>` : '';
            data.forEach(item => element.add(new Option(item.name || item.value, item.value)));
        }

        if (parentDiv) {
            parentDiv.style.pointerEvents = isEnabled ? 'auto' : 'none';
            parentDiv.style.opacity = isEnabled ? '1' : '0.5';
        }

        if (isSelect || isSubmit) {
            element.disabled = !isEnabled;
            element.style.pointerEvents = isEnabled ? 'auto' : 'none';
            element.style.opacity = isEnabled ? '1' : '0.5';
        }
    }

    async function initializeSizeForm(activeTabContent, activeSubTabNumber, formAction, searchBy) {
        const querySelectByName = (name) => activeTabContent.querySelector(`select[data-name="${name}"]`);

        const tire = {
            width: querySelectByName('tire-width'),
            profile: querySelectByName('tire-profile'),
            diameter: querySelectByName('tire-diameter'),
            season: querySelectByName('tire-season')
        };
        const rim = {
            bolt: querySelectByName('rim-bolt'),
            width: querySelectByName('rim-width'),
            diameter: querySelectByName('rim-diameter'),
            et: querySelectByName('rim-et')
        };

        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        submitButton.form.addEventListener('submit', function(event) {
            event.preventDefault();
            localStorage.setItem('searchBy', 'bySize');
            const queryParameters = buildQueryParameters();
            window.location.href = `${formAction}?${new URLSearchParams(queryParameters).toString()}`;

            function buildQueryParameters() {
                switch (activeSubTabNumber) {
                    case '1': {
                        const baseParams = {
                            'filter.p.m.tires.width': tire.width.value,
                            'filter.p.m.tires.profile': tire.profile.value,
                            'filter.p.m.tires.diameter': tire.diameter.value,
                            'filter.p.m.tires.season': tire.season.value
                        };

                        const pathname = window.location.pathname;
                        const manufacturerMatch = pathname.match(/\/pages\/opony\/([^\/]+)/);
                        if (manufacturerMatch && manufacturerMatch[1]) {
                            baseParams['filter.p.m.tires.manufacturer'] = manufacturerMatch[1];
                        }

                        return baseParams;
                    }
                    case '2': {
                        const baseParams = {
                            'filter.p.m.tires.width': tire.width.value,
                            'filter.p.m.tires.profile': tire.profile.value,
                            'filter.p.m.tires.diameter': tire.diameter.value,
                            'filter.p.m.tires.season': tire.season.value
                        };

                        const rimParams = {
                            'filter.p.m.rim.rim_bolt': rim.bolt.value,
                            'filter.p.m.rim.width': rim.width.value
                        };

                        return { ...baseParams, ...rimParams };
                    }
                    case '3': {
                       return {
                            'filter.p.m.rim.diameter': rim.diameter.value,
                            'filter.p.m.rim.rim_bolt': rim.bolt.value,
                            'filter.p.m.rim.width': rim.width.value,
                            'filter.p.m.rim.rim_et': rim.et.value
                       };
                    }
                    default:
                        return {};
                }
            }
        });

        const urlParams = new URLSearchParams(window.location.search);
        const hasTireParams = urlParams.has('filter.p.m.tires.width') && urlParams.has('filter.p.m.tires.profile') && urlParams.has('filter.p.m.tires.diameter');
        const hasWheelParams = urlParams.has('filter.p.m.tires.width') && urlParams.has('filter.p.m.tires.profile') && urlParams.has('filter.p.m.tires.diameter') && urlParams.has('filter.p.m.rim.diameter') && urlParams.has('filter.p.m.rim.rim_bolt') && urlParams.has('filter.p.m.rim.width') && urlParams.has('filter.p.m.rim.rim_et');
        const hasRimParams = urlParams.has('filter.p.m.rim.diameter') && urlParams.has('filter.p.m.rim.rim_bolt') && urlParams.has('filter.p.m.rim.width') && urlParams.has('filter.p.m.rim.rim_et');

        let tire_widthsData;
        let rim_diametersData;
        let tire_profilesData;
        let tire_diametersData;

        if (window.location.pathname.includes('/collections/opony') && hasTireParams && !hasWheelParams && !hasRimParams) {
            const tireWidth = urlParams.get('filter.p.m.tires.width');
            const tireProfile = urlParams.get('filter.p.m.tires.profile');
            const rimDiameter = urlParams.get('filter.p.m.tires.diameter');

            if (searchBy === 'bySize' && tireWidth && tireProfile && rimDiameter) {
                const searchByTireData = await fetchData('by_tire/search/', {
                    section_width: tireWidth,
                    aspect_ratio: tireProfile,
                    rim_diameter: rimDiameter
                });

                console.log(searchByTireData);

                const matchingSizes = `${tireWidth}/${tireProfile}/R${rimDiameter}`;
                console.log(matchingSizes);

                tire_widthsData = await fetchData('by_tire/sw/', {region: 'eudm'});
                manageSelect(tire.width, tire_widthsData.data, true, "Szerokość");
                tire.width.value = tireWidth;

                tire_profilesData = await fetchData('by_tire/ar/', {
                    section_width: tireWidth,
                    region: 'eudm'
                });
                manageSelect(tire.profile, tire_profilesData.data, true, "Profil");
                tire.profile.value = tireProfile;

                tire_diametersData = await fetchData('by_tire/rd/', {
                    section_width: tireWidth,
                    aspect_ratio: tireProfile,
                    region: 'eudm'
                });
                manageSelect(tire.diameter, tire_diametersData.data, true, "Średnica");
                tire.diameter.value = rimDiameter;

                manageSelect(submitButton, [], tire.width.value && tire.profile.value && tire.diameter.value);
            }
        }
        else if (window.location.pathname.includes('/collections/kola') && !hasTireParams && hasWheelParams  && !hasRimParams) {
            const tireWidth = urlParams.get('filter.p.m.tires.width');
            const tireProfile = urlParams.get('filter.p.m.tires.profile');
            const tireDiameter = urlParams.get('filter.p.m.tires.diameter');
            const rimBolt = urlParams.get('filter.p.m.rim.rim_bolt');
            const rimWidth = urlParams.get('filter.p.m.rim.rim_bolt');

            if (searchBy === 'bySize' && tireWidth && tireProfile && tireDiameter && rimBolt && rimWidth) {
                const searchByTireData = await fetchData('by_tire/search/', {
                    section_width: tireWidth,
                    aspect_ratio: tireProfile,
                    rim_diameter: tireDiameter
                });

                console.log(searchByTireData);

                const matchingSizes = `${tireWidth}/${tireProfile}/R${tireDiameter}`;
                console.log(matchingSizes);

                tire_widthsData = await fetchData('by_tire/sw/', {region: 'eudm'});
                manageSelect(tire.width, tire_widthsData.data, true, "Szerokość opony");
                tire.width.value = tireWidth;

                tire_profilesData = await fetchData('by_tire/ar/', {
                    section_width: tireWidth,
                    region: 'eudm'
                });
                manageSelect(tire.profile, tire_profilesData.data, true, "Profil opony");
                tire.profile.value = tireProfile;

                tire_diametersData = await fetchData('by_tire/rd/', {
                    section_width: tireWidth,
                    aspect_ratio: tireProfile,
                    region: 'eudm'
                });
                manageSelect(tire.diameter, tire_diametersData.data, true, "Średnica felgi");
                tire.diameter.value = tireDiameter;

                manageSelect(submitButton, [], tire.width.value && tire.profile.value && tire.diameter.value);
            }
        }

        switch (activeSubTabNumber) {
            case '1':
                if (!hasTireParams) {
                    tire_widthsData = await fetchData('by_tire/sw/', {region: 'eudm'});
                    manageSelect(tire.width, tire_widthsData.data, true); // Enable and populate the first select

                    manageSelect(tire.profile, [], false);
                    manageSelect(tire.diameter, [], false);
                }

                tire.width.addEventListener('change', async () => {
                    if (tire.width.value) {
                        const tire_profilesData = await fetchData('by_tire/ar/', {
                            section_width: tire.width.value,
                            region: 'eudm'
                        });
                        manageSelect(tire.profile, tire_profilesData.data, true); // Enable and populate the second select based on the first selects choice
                        manageSelect(tire.diameter, [], false); // Disable and clear the third select until the second select is chosen
                    }
                });

                tire.profile.addEventListener('change', async () => {
                    if (tire.profile.value) {
                        const tire_diametersData = await fetchData('by_tire/rd/', {
                            section_width: tire.width.value,
                            aspect_ratio: tire.profile.value,
                            region: 'eudm'
                        });
                        manageSelect(tire.diameter, tire_diametersData.data, true); // Enable and populate the third select based on the second selects choice
                    }
                });

                tire.diameter.addEventListener('change', () => {
                    // Enable the submit button if all selects have a value
                    const isFormComplete = [tire.width, tire.profile, tire.diameter].every(select => select && select.value);
                    manageSelect(submitButton, [], isFormComplete);
                });

                break;
            case '2':
                if (!hasWheelParams) {
                    tire_widthsData = await fetchData('by_tire/sw/', {region: 'eudm'});
                    manageSelect(tire.width, tire_widthsData.data, true); // Enable and populate the first select

                    manageSelect(tire.profile, [], false);
                    manageSelect(tire.diameter, [], false);
                    manageSelect(rim.bolt, [], false);
                    manageSelect(rim.width, [], false);
                }

                tire.width.addEventListener('change', async () => {
                    if (tire.width.value) {
                        const tire_profilesData = await fetchData('by_tire/ar/', {
                            section_width: tire_width.value,
                            region: 'eudm'
                        });
                        manageSelect(tire.profile, tire_profilesData.data, true); // Enable and populate the second select based on the first selects choice
                        manageSelect(tire.diameter, [], false); // Disable and clear the third select until the second select is chosen
                        manageSelect(rim.bolt, [], false);
                        manageSelect(rim.width, [], false);
                    }
                });

                tire.profile.addEventListener('change', async () => {
                    if (tire.profile.value) {
                        const tire_diametersData = await fetchData('by_tire/rd/', {
                            section_width: tire.width.value,
                            aspect_ratio: tire.profile.value,
                            region: 'eudm'
                        });
                        manageSelect(tire.diameter, tire_diametersData.data, true); // Enable and populate the third select based on the second selects choice
                        manageSelect(rim.bolt, [], false);
                        manageSelect(rim.width, [], false);
                    }
                });

                tire.diameter.addEventListener('change', async () => {
                    if (tire.diameter.value) {
                        const rim_boltsData = await fetchData('by_rim/bp/', {region: 'eudm'});
                        manageSelect(rim.bolt, rim_boltsData.data, true); // Enable and populate the third select based on the second selects choice
                        manageSelect(rim.width, [], false);
                    }
                });

                rim.bolt.addEventListener('change', async () => {
                    if (rim_bolt.value) {
                        const rim_widthsData = await fetchData('by_rim/rw/', {bolt_pattern: rim.bolt.value});
                        manageSelect(rim.width, rim_widthsData.data, true); // Enable and populate the third select based on the second selects choice
                    }
                });

                rim_width.addEventListener('change', () => {
                    // Enable the submit button if all selects have a value
                    const isFormComplete = [tire.width, tire.profile, tire.diameter, rim.bolt, rim.width].every(select => select && select.value);
                    manageSelect(submitButton, [], isFormComplete);
                });

                break;
            case '3':
                if (!hasRimParams) {
                    rim_diametersData = await fetchData('by_rim/rd/', {region: 'eudm'});
                    manageSelect(rim_diameter, rim_diametersData.data, true); // Enable and populate the first select

                    manageSelect(rim.bolt, [], false);
                    manageSelect(rim.width, [], false);
                    manageSelect(rim.et, [], false);
                }

                // Set up event listeners for select changes
                rim.diameter.addEventListener('change', async () => {
                    if (rim.diameter.value) {
                        const rim_boltsData = await fetchData('by_rim/bp/', {
                            rim_diameter: rim.diameter.value,
                            region: 'eudm'
                        });
                        manageSelect(rim.bolt, rim_boltsData.data, true); // Enable and populate the second select based on the first selects choice
                        manageSelect(rim.width, [], false); // Disable and clear the third select until the second select is chosen
                        manageSelect(rim.et, [], false);
                    }
                });

                rim.bolt.addEventListener('change', async () => {
                    if (rim.bolt.value) {
                        const rim_widthsData = await fetchData('by_rim/rw/', {
                            rim_diameter: rim.diameter.value,
                            bolt_pattern: rim.bolt.value,
                            region: 'eudm'
                        });
                        manageSelect(rim.width, rim_widthsData.data, true); // Enable and populate the third select based on the second selects choice
                        manageSelect(rim.et, [], false);
                    }
                });

                rim.width.addEventListener('change', async () => {
                    if (rim.width.value) {
                        const rim_etsData = await fetchData('by_rim/of/', {
                            rim_diameter: rim.diameter.value,
                            bolt_pattern: rim.bolt.value,
                            rim_width: rim.width.value,
                            region: 'eudm'
                        });
                        manageSelect(rim.et, rim_etsData.data, true); // Enable and populate the third select based on the second selects choice
                    }
                });

                rim.et.addEventListener('change', () => {
                    // Enable the submit button if all selects have a value
                    const isFormComplete = [rim.diameter, rim.bolt, rim.width, rim.et].every(select => select && select.value);
                    manageSelect(submitButton, [], isFormComplete);
                });

                break;
        }
    }

    async function initializeCarForm(activeTabContent, formAction) {
        const makes = activeTabContent.querySelector('select[data-name="car-marka"]');
        const models = activeTabContent.querySelector('select[data-name="car-model"]');
        const generations = activeTabContent.querySelector('select[data-name="car-generacja"]');
        const years = activeTabContent.querySelector('select[data-name="car-rok"]');
        const engines = activeTabContent.querySelector('select[data-name="car-silnik"]');
        const submitButton = activeTabContent.querySelector('input[type="submit"]');

        // Define event listener for form submission
        submitButton.form.addEventListener('submit', function (event) {
            event.preventDefault();

            localStorage.setItem('searchBy', 'byCar');

            const queryParameters = {
                'filter.p.car.make': makes.value,
                'filter.p.car.model': models.value,
                'filter.p.car.generation': generations.value,
                'filter.p.car.year': years.value,
                'filter.p.car.engine': engines.value
            };

            const queryString = Object.entries(queryParameters).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');
            window.location.href = `${formAction}?${queryString}`;
        });

        manageSelect(makes);
        manageSelect(models, [], false);
        manageSelect(generations, [], false);
        manageSelect(years, [], false);
        manageSelect(engines, [], false);
        manageSelect(submitButton, [], false);

        // Fetch data for the first select and update options
        const makesData = await fetchData('makes/', {region: 'eudm'});
        manageSelect(makes, makesData.data.map(make => ({value: make.slug, name: make.name})), true);

        // Set up event listeners for select changes
        makes.addEventListener('change', async () => {
            if (makes.value) {
                const modelsData = await fetchData('models/', {make: makes.value});
                manageSelect(models, modelsData.data.map(model => ({value: model.slug, name: model.name})), true);
                manageSelect(generations, [], false); // Reset the subsequent selects
                manageSelect(years, [], false);
                manageSelect(engines, [], false);
            }
        });

        models.addEventListener('change', async () => {
            if (models.value) {
                const generationsData = await fetchData('generations/', {make: makes.value, model: models.value});
                manageSelect(generations, generationsData.data.map(generation => ({
                    value: generation.slug,
                    name: generation.name
                })), true);
                manageSelect(years, [], false); // Further select reset
                manageSelect(engines, [], false);
            }
        });

        generations.addEventListener('change', async () => {
            if (generations.value) {
                const generationsData = await fetchData('generations/', {make: makes.value, model: models.value});
                const selectedGeneration = generationsData.data.find(gen => gen.slug === generations.value);
                manageSelect(years, selectedGeneration.years.map(year => ({value: year, name: year.toString()})), true);
                manageSelect(engines, [], false);
            }
        });

        years.addEventListener('change', async () => {
            if (years.value) {
                const enginesData = await fetchData('modifications/', {
                    make: makes.value,
                    model: models.value,
                    year: years.value
                });
                manageSelect(engines, enginesData.data.map(engine => ({value: engine.slug, name: engine.name})), true);
            }
        });

        [makes, models, generations, years, engines].forEach(select => select.addEventListener('change', () => {
            // Enable the submit button if all selects have a value
            const isFormComplete = [makes, models, generations, years, engines].every(select => select && select.value);
            manageSelect(submitButton, [], isFormComplete);
        }));
    }

    function getActiveTabInfo() {
        const activePage = window.location.pathname;
        let activeTabContent;
        let activeSubTabNumber = null;

        const pathToSubTabNumber = {
            '/collections/opony': '1',
            '/collections/kola-i-felgi-samochodowe': '2',
            '/collections/felgi': '3'
        };

        if (activePage === '/') {
            activeTabContent = document.querySelector('.w-tab-pane.w--tab-active > div > div.w-tab-pane.w--tab-active');
            const activeSubTab = document.querySelector('.tab-link-left-search.w--current');
            if (activeSubTab) {
                activeSubTabNumber = activeSubTab.getAttribute('data-w-tab').split('.')[1];
            }
        } else {
            if (activePage.includes('/pages/opony/')) {
                activeTabContent = document.getElementById('tire-manufacturer-form');
                activeSubTabNumber = '1';
            } else if (activePage.includes('/collections/')) {
                activeTabContent = document.querySelector('div[data-sub-tab].w-tab-pane.w--tab-active');
                activeSubTabNumber = pathToSubTabNumber[activePage] || null;
            }
        }

        return { activeTabContent, activeSubTabNumber };
    }

    function activateFormInitialization() {
        const { activeTabContent, activeSubTabNumber } = getActiveTabInfo();
        if (!activeTabContent) {
            console.log('Active tab content not found.');
            return
        }

        const searchBy = localStorage.getItem('searchBy');

        const formActionBaseURL = 'https://moto-m5.myshopify.com/collections/';

        let formAction = `${formActionBaseURL}opony`; // Default action
        switch (activeSubTabNumber) {
            case '2':
                formAction = `${formActionBaseURL}kola-i-felgi-samochodowe`;
                break;
            case '3':
                formAction = `${formActionBaseURL}felgi`;
                break;
        }

        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        if (submitButton) {
            manageSelect(submitButton, [], false); // Initially disable the submit button
        }

        if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-1')) {
            // "Search by Size"
            initializeSizeForm(activeTabContent, activeSubTabNumber, formAction, searchBy);
        } else if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-2')) {
            // "Search by Car"
            initializeCarForm(activeTabContent, formAction);
        }
    }

    // Listen for tab changes to re-initialize form for the active tab
    document.querySelectorAll('.tab-link-top-search, .tab-link-left-search, .tab-link-tab-2').forEach(tab => {
        tab.addEventListener('click', () => {
            setTimeout(activateFormInitialization, 150);
        });
    });

    activateFormInitialization(); // Initialize the form for the currently active tab on page load
});
