document.addEventListener('DOMContentLoaded', async function () {
    const baseURL = 'https://api.wheel-size.com/v2';
    const userKey = '8608442fd845888bda065b97c8d141d9';

    async function fetchData(endpoint, params) {
        try {
            const url = new URL(`${baseURL}/${endpoint}`); // Ensure baseURL is defined and correct
            url.search = new URLSearchParams({ user_key: userKey, ...params }).toString();
            const response = await fetch(url);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            console.error('Fetch Error:', error);
            // Return a default object or handle the error as needed
            {% comment %}return { data: [] };{% endcomment %}
        }
    }

    function manageSelect(element, options = [], isEnabled = true, placeholder = "Wybierz...") {
        if (!element) return;

        element.innerHTML = isEnabled && placeholder ? `<option value="">${placeholder}</option>` : '';
        if (isEnabled) {
            options.forEach(({ name, value }) => element.add(new Option(name || value, value)));
        }

        element.disabled = !isEnabled;
        const styleProps = { pointerEvents: isEnabled ? 'auto' : 'none', opacity: isEnabled ? '1' : '0.5' };
        Object.assign(element.style, styleProps);

        const parentDiv = element.closest('.form-field-wrapper');
        if (parentDiv) Object.assign(parentDiv.style, styleProps);
    }

    function mapSelectNameToApiParam(selectName) {
        const mapping = {
            'tire-width': 'section_width',
            'tire-profile': 'aspect_ratio',
            'tire-diameter': 'rim_diameter',
            'rim-bolt': 'bolt_pattern',
            'rim-width': 'rim_width',
            'rim-diameter': 'rim_diameter'
        };
        return mapping[selectName] || selectName;
    }

    async function initializeSelects(activeTabContent, elements, fetchDataEndpoints, urlParams) {
        let previousSelectValue = null;

        for (let i = 0; i < elements.length; i++) {
            const elementName = elements[i];
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);
            if (!selectElement) continue;

            let urlParamName;
            // Adjust the parameter name based on whether it's a tire-related select
            if (elementName.includes('tire')) {
                urlParamName = `filter.p.m.${elementName.replace('-', 's.')}`;
            } else {
                urlParamName = `filter.p.m.rim.${elementName.replace('rim-', '')}`;
            }

            const urlParamValue = urlParams.get(urlParamName);
            const fetchDataParams = { region: 'eudm' };

            if (previousSelectValue && i > 0) {
                const previousSelectApiParam = mapSelectNameToApiParam(elements[i - 1]);
                fetchDataParams[previousSelectApiParam] = previousSelectValue;
            }

            if (urlParamValue) {
                const currentApiParam = mapSelectNameToApiParam(elementName);
                fetchDataParams[currentApiParam] = urlParamValue;
            }

            const data = await fetchData(fetchDataEndpoints[elementName], fetchDataParams);

            if (data && data.data) {
                manageSelect(selectElement, data.data, true);
                if (!selectElement.value && data.data.length > 0 && urlParamValue === null) {
                    selectElement.value = data.data[0].value; // Default to the first option if no URL parameter value is provided
                } else if (urlParamValue) {
                    selectElement.value = urlParamValue;
                }
                previousSelectValue = selectElement.value; // Update previousSelectValue for the next iteration
            }
        }
    }

    function setupEventListeners(activeTabContent, elements, fetchDataEndpoints) {
        elements.forEach((elementName, index) => {
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);

            selectElement.addEventListener('change', async () => {
                checkFormCompleteAndManageSubmitButton(activeTabContent, elements);

                if (elementName === 'tire-season') return;

                if (index < elements.length) {
                    const nextElementName = elements[index + 1];
                    const nextSelectElement = activeTabContent.querySelector(`select[data-name="${nextElementName}"]`);

                    if (selectElement.value && elementName !== 'tire-season' && nextElementName !== 'tire-season') {
                        const apiParam = mapSelectNameToApiParam(elementName);
                        const data = await fetchData(fetchDataEndpoints[nextElementName], { region: 'eudm', [apiParam]: selectElement.value });
                        manageSelect(nextSelectElement, data.data, true);
                    } else {
                        if (nextElementName !== 'tire-season') {
                            manageSelect(nextSelectElement, [], false);
                        }
                    }

                    elements.slice(index + 2).forEach(name => {
                        if (name !== 'tire-season') {
                            const elementToDisable = activeTabContent.querySelector(`select[data-name="${name}"]`);
                            manageSelect(elementToDisable, [], false);
                        }
                    });
                }
            });
        });
    }

    function buildQueryParameters(activeSubTabNumber, tire, rim, urlParams) {
        let queryParams = {};

        // Base parameters for tires are always included in subtabs 1 and 2
        if (activeSubTabNumber === '1' || activeSubTabNumber === '2') {
            queryParams = {
                'filter.p.m.tires.width': tire.width.value,
                'filter.p.m.tires.profile': tire.profile.value,
                'filter.p.m.tires.diameter': tire.diameter.value,
                'filter.p.m.tires.season': tire.season.value
            };
        }

        // Include manufacturer if present in the URL (applicable only to subtab 1)
        if (activeSubTabNumber === '1') {
            const manufacturer = urlParams.get('filter.p.m.tires.manufacturer');
            if (manufacturer) {
                queryParams['filter.p.m.tires.manufacturer'] = manufacturer;
            }
        }

        // For subtab 2, include rim parameters along with base tire parameters
        if (activeSubTabNumber === '2') {
            Object.assign(queryParams, {
                'filter.p.m.rim.rim_bolt': rim.bolt.value,
                'filter.p.m.rim.width': rim.width.value
            });
        }

        // For subtab 3, only include rim parameters
        if (activeSubTabNumber === '3') {
            queryParams = {
                'filter.p.m.rim.diameter': rim.diameter.value,
                'filter.p.m.rim.rim_bolt': rim.bolt.value,
                'filter.p.m.rim.width': rim.width.value,
                'filter.p.m.rim.rim_et': rim.et.value
            };
        }

        return queryParams;
    }

    function checkFormCompleteAndManageSubmitButton(activeTabContent, elements) {
        const allSelected = elements.every(elementName => {
            const selectElement = activeTabContent.querySelector(`select[data-name="${elementName}"]`);
            return selectElement && selectElement.value;
        });
        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        manageSelect(submitButton, [], allSelected);
    }

    async function initializeSizeForm(activeTabContent, activeSubTabNumber, formAction) {
        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        const urlParams = new URLSearchParams(window.location.search);

        const tireElements = ['tire-width', 'tire-profile', 'tire-diameter', 'tire-season'];
        const rimElements = ['rim-diameter', 'rim-bolt', 'rim-width', 'rim-et'];
        const wheelElements = ['tire-width', 'tire-profile', 'tire-diameter', 'rim-bolt', 'rim-width', 'tire-season'];
        const fetchDataEndpoints = {
            'tire-width': 'by_tire/sw/', 'tire-profile': 'by_tire/ar/', 'tire-diameter': 'by_tire/rd/',
            'rim-diameter': 'by_rim/rd/', 'rim-bolt': 'by_rim/bp/', 'rim-width': 'by_rim/rw/', 'rim-et': 'by_rim/of/'
        };

        // Construct tire and rim objects with corresponding select elements
        const tire = {
            width: activeTabContent.querySelector(`select[data-name="tire-width"]`),
            profile: activeTabContent.querySelector(`select[data-name="tire-profile"]`),
            diameter: activeTabContent.querySelector(`select[data-name="tire-diameter"]`),
            season: activeTabContent.querySelector(`select[data-name="tire-season"]`)
        };
        const rim = {
            diameter: activeTabContent.querySelector(`select[data-name="rim-diameter"]`),
            bolt: activeTabContent.querySelector(`select[data-name="rim-bolt"]`),
            width: activeTabContent.querySelector(`select[data-name="rim-width"]`),
            et: activeTabContent.querySelector(`select[data-name="rim-et"]`)
        };

        // Initialize select elements based on the active sub-tab
        const elementsToInitialize = activeSubTabNumber === '1' ? tireElements : activeSubTabNumber === '2' ? wheelElements : rimElements;
        setupEventListeners(activeTabContent, elementsToInitialize, fetchDataEndpoints);
        await initializeSelects(activeTabContent, elementsToInitialize, fetchDataEndpoints, urlParams);
        checkFormCompleteAndManageSubmitButton(activeTabContent, elementsToInitialize);

        const form = submitButton.form;
        form.addEventListener('submit', event => {
            event.preventDefault();
            localStorage.setItem('searchBy', 'bySize');

            // Build query parameters based on the active sub-tab and selected options
            const queryParams = buildQueryParameters(activeSubTabNumber, tire, rim, urlParams);
            window.location.href = `${formAction}?${new URLSearchParams(queryParams).toString()}`;
        });
    }

    async function initializeCarForm(activeTabContent, formAction) {
        const makes = activeTabContent.querySelector('select[data-name="car-marka"]');
        const models = activeTabContent.querySelector('select[data-name="car-model"]');
        const generations = activeTabContent.querySelector('select[data-name="car-generacja"]');
        const years = activeTabContent.querySelector('select[data-name="car-rok"]');
        const engines = activeTabContent.querySelector('select[data-name="car-silnik"]');
        const submitButton = activeTabContent.querySelector('input[type="submit"]');

        // Define event listener for form submission
        submitButton.form.addEventListener('submit', function (event) {
            event.preventDefault();

            localStorage.setItem('searchBy', 'byCar');

            const queryParameters = {
                'filter.p.car.make': makes.value,
                'filter.p.car.model': models.value,
                'filter.p.car.generation': generations.value,
                'filter.p.car.year': years.value,
                'filter.p.car.engine': engines.value
            };

            const queryString = Object.entries(queryParameters).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');
            window.location.href = `${formAction}?${queryString}`;
        });

        manageSelect(makes);
        manageSelect(models, [], false);
        manageSelect(generations, [], false);
        manageSelect(years, [], false);
        manageSelect(engines, [], false);
        manageSelect(submitButton, [], false);

        // Fetch data for the first select and update options
        const makesData = await fetchData('makes/', {region: 'eudm'});
        manageSelect(makes, makesData.data.map(make => ({value: make.slug, name: make.name})), true);

        // Set up event listeners for select changes
        makes.addEventListener('change', async () => {
            if (makes.value) {
                const modelsData = await fetchData('models/', {make: makes.value});
                manageSelect(models, modelsData.data.map(model => ({value: model.slug, name: model.name})), true);
                manageSelect(generations, [], false); // Reset the subsequent selects
                manageSelect(years, [], false);
                manageSelect(engines, [], false);
            }
        });

        models.addEventListener('change', async () => {
            if (models.value) {
                const generationsData = await fetchData('generations/', {make: makes.value, model: models.value});
                manageSelect(generations, generationsData.data.map(generation => ({
                    value: generation.slug,
                    name: generation.name
                })), true);
                manageSelect(years, [], false); // Further select reset
                manageSelect(engines, [], false);
            }
        });

        generations.addEventListener('change', async () => {
            if (generations.value) {
                const generationsData = await fetchData('generations/', {make: makes.value, model: models.value});
                const selectedGeneration = generationsData.data.find(gen => gen.slug === generations.value);
                manageSelect(years, selectedGeneration.years.map(year => ({value: year, name: year.toString()})), true);
                manageSelect(engines, [], false);
            }
        });

        years.addEventListener('change', async () => {
            if (years.value) {
                const enginesData = await fetchData('modifications/', {
                    make: makes.value,
                    model: models.value,
                    year: years.value
                });
                manageSelect(engines, enginesData.data.map(engine => ({value: engine.slug, name: engine.name})), true);
            }
        });

        [makes, models, generations, years, engines].forEach(select => select.addEventListener('change', () => {
            // Enable the submit button if all selects have a value
            const isFormComplete = [makes, models, generations, years, engines].every(select => select && select.value);
            manageSelect(submitButton, [], isFormComplete);
        }));
    }

    function getActiveTabInfo() {
        const activePage = window.location.pathname;
        let activeTabContent;
        let activeSubTabNumber = null;

        const pathToSubTabNumber = {
            '/collections/opony': '1',
            '/collections/kola': '2',
            '/collections/felgi': '3'
        };

        if (activePage === '/') {
            activeTabContent = document.querySelector('.w-tab-pane.w--tab-active > div > div.w-tab-pane.w--tab-active');
            const activeSubTab = document.querySelector('.tab-link-left-search.w--current');
            if (activeSubTab) {
                activeSubTabNumber = activeSubTab.getAttribute('data-w-tab').split('.')[1];
            }
        } else {
            if (activePage.includes('/pages/opony/')) {
                activeTabContent = document.getElementById('tire-manufacturer-form');
                activeSubTabNumber = '1';
            } else if (activePage.includes('/collections/')) {
                activeTabContent = document.querySelector('div[data-sub-tab].w-tab-pane.w--tab-active');
                activeSubTabNumber = pathToSubTabNumber[activePage] || null;
            }
        }

        return { activeTabContent, activeSubTabNumber };
    }

    function activateFormInitialization() {
        const { activeTabContent, activeSubTabNumber } = getActiveTabInfo();
        if (!activeTabContent) {
            console.log('Active tab content not found.');
            return
        }

        const searchBy = localStorage.getItem('searchBy');

        const formActionBaseURL = 'https://moto-m5.myshopify.com/collections/';

        let formAction = `${formActionBaseURL}opony`; // Default action
        switch (activeSubTabNumber) {
            case '2':
                formAction = `${formActionBaseURL}kola`;
                break;
            case '3':
                formAction = `${formActionBaseURL}felgi`;
                break;
        }

        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        if (submitButton) {
            manageSelect(submitButton, [], false); // Initially disable the submit button
        }

        if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-1')) {
            // "Search by Size"
            initializeSizeForm(activeTabContent, activeSubTabNumber, formAction, searchBy);
        } else if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-2')) {
            // "Search by Car"
            initializeCarForm(activeTabContent, formAction);
        }
    }

    // Listen for tab changes to re-initialize form for the active tab
    document.querySelectorAll('.tab-link-top-search, .tab-link-left-search, .tab-link-tab-2').forEach(tab => {
        tab.addEventListener('click', () => {
            setTimeout(activateFormInitialization, 150);
        });
    });

    activateFormInitialization(); // Initialize the form for the currently active tab on page load
});
