document.addEventListener('DOMContentLoaded', async function () {
    const baseURL = 'https://api.wheel-size.com/v2';
    const userKey = '8608442fd845888bda065b97c8d141d9';

    async function fetchData(endpoint, params) {
        const url = new URL(`${baseURL}/${endpoint}`);
        url.search = new URLSearchParams({user_key: userKey, ...params}).toString();
        const response = await fetch(url);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return await response.json();
    }

    function manageSelect(element, data = [], isEnabled = true, placeholder = "Wybierz...") {
        if (!element) return;

        // Handle select elements
        if (element.tagName === 'SELECT') {
            element.innerHTML = ''; // Clear existing options
            if (isEnabled) {
                if (placeholder) {
                    element.add(new Option(placeholder, ''));
                }
                data.forEach(item => element.add(new Option(item.name || item.value, item.value)));
            }

            // Adjust parent div styling for select elements
            const parentDiv = element.closest('.form-field-wrapper');
            if (parentDiv) {
                parentDiv.style.pointerEvents = isEnabled ? 'auto' : 'none';
                parentDiv.style.opacity = isEnabled ? '1' : '0.5';
            }

            element.disabled = !isEnabled; // Enable/disable select based on the isEnabled flag
        }

        // Handle submit buttons
        else if (element.type === 'submit') {
            element.style.pointerEvents = isEnabled ? 'auto' : 'none';
            element.style.opacity = isEnabled ? '1' : '0.5';
            element.disabled = !isEnabled; // Enable/disable button based on the isEnabled flag
        }
    }

    async function initializeSizeForm(activeTabContent, activeSubTabNumber, formAction) {
        const tire_width = activeTabContent.querySelector('select[data-name="tire-width"]');
        const tire_profile = activeTabContent.querySelector('select[data-name="tire-profile"]');
        const tire_diameter = activeTabContent.querySelector('select[data-name="tire-diameter"]');

        const rim_bolt = activeTabContent.querySelector('select[data-name="rim-bolt"]');
        const rim_width = activeTabContent.querySelector('select[data-name="rim-width"]');
        const rim_diameter = activeTabContent.querySelector('select[data-name="rim-diameter"]');
        const rim_et = activeTabContent.querySelector('select[data-name="rim-et"]');

        const season = activeTabContent.querySelector('select[data-name="tire-season"]');
        const submitButton = activeTabContent.querySelector('input[type="submit"]');

        // Define event listener for form submission
        submitButton.form.addEventListener('submit', function (event) {
            event.preventDefault();

            localStorage.setItem('searchBy', 'bySize');

            let queryParameters = {};

            switch (activeSubTabNumber) {
                case '1':
                    queryParameters = {
                        'filter.p.m.tires.width': tire_width.value,
                        'filter.p.m.tires.profile': tire_profile.value,
                        'filter.p.m.tires.diameter': tire_diameter.value,
                        'filter.p.m.tires.season': season.value.toLowerCase()
                    };

                    const pathname = window.location.pathname;
                    const manufacturerMatch = pathname.match(/\/pages\/opony\/([^\/]+)/);
                    if (manufacturerMatch && manufacturerMatch[1]) {
                        queryParameters['filter.p.m.tires.manufacturer'] = manufacturerMatch[1];
                    }
                    break;
                case '2':
                    queryParameters = {
                        'filter.p.m.tires.width': tire_width.value,
                        'filter.p.m.tires.profile': tire_profile.value,
                        'filter.p.m.tires.diameter': tire_diameter.value,
                        'filter.p.m.rim.rim_bolt': rim_bolt.value,
                        'filter.p.m.rim.width': rim_width.value,
                        'filter.p.m.tires.season': season.value.toLowerCase()
                    };
                    break;
                case '3':
                    queryParameters = {
                        'filter.p.m.rim.diameter': rim_diameter.value,
                        'filter.p.m.rim.rim_bolt': rim_bolt.value,
                        'filter.p.m.rim.width': rim_width.value,
                        'filter.p.m.rim.rim_et': rim_et.value
                    };
                    break;
            }

            const queryString = Object.entries(queryParameters).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');
            window.location.href = `${formAction}?${queryString}`;
        });

        {% comment %} INITIAL {% endcomment %}
        manageSelect(submitButton, [], false);

        let tire_widthsData;
        let rim_diametersData;

        switch (activeSubTabNumber) {
            case '1':
                tire_widthsData = await fetchData('by_tire/sw/', {region: 'eudm'});
                manageSelect(tire_width, tire_widthsData.data, true); // Enable and populate the first select

                manageSelect(tire_profile, [], false);
                manageSelect(tire_diameter, [], false);

                tire_width.addEventListener('change', async () => {
                    if (tire_width.value) {
                        const tire_profilesData = await fetchData('by_tire/ar/', {
                            section_width: tire_width.value,
                            region: 'eudm'
                        });
                        manageSelect(tire_profile, tire_profilesData.data, true); // Enable and populate the second select based on the first selects choice
                        manageSelect(tire_diameter, [], false); // Disable and clear the third select until the second select is chosen
                    }
                });

                tire_profile.addEventListener('change', async () => {
                    if (tire_profile.value) {
                        const tire_diametersData = await fetchData('by_tire/rd/', {
                            section_width: tire_width.value,
                            aspect_ratio: tire_profile.value,
                            region: 'eudm'
                        });
                        manageSelect(tire_diameter, tire_diametersData.data, true); // Enable and populate the third select based on the second selects choice
                    }
                });

                tire_diameter.addEventListener('change', () => {
                    // Enable the submit button if all selects have a value
                    const isFormComplete = [tire_width, tire_profile, tire_diameter].every(select => select && select.value);
                    manageSelect(submitButton, [], isFormComplete);
                });

                break;
            case '2':
                tire_widthsData = await fetchData('by_tire/sw/', {region: 'eudm'});
                manageSelect(tire_width, tire_widthsData.data, true); // Enable and populate the first select

                manageSelect(tire_profile, [], false);
                manageSelect(tire_diameter, [], false);
                manageSelect(rim_bolt, [], false);
                manageSelect(rim_width, [], false);

                tire_width.addEventListener('change', async () => {
                    if (tire_width.value) {
                        const tire_profilesData = await fetchData('by_tire/ar/', {
                            section_width: tire_width.value,
                            region: 'eudm'
                        });
                        manageSelect(tire_profile, tire_profilesData.data, true); // Enable and populate the second select based on the first selects choice
                        manageSelect(tire_diameter, [], false); // Disable and clear the third select until the second select is chosen
                        manageSelect(rim_bolt, [], false);
                        manageSelect(rim_width, [], false);
                    }
                });

                tire_profile.addEventListener('change', async () => {
                    if (tire_profile.value) {
                        const tire_diametersData = await fetchData('by_tire/rd/', {
                            section_width: tire_width.value,
                            aspect_ratio: tire_profile.value,
                            region: 'eudm'
                        });
                        manageSelect(tire_diameter, tire_diametersData.data, true); // Enable and populate the third select based on the second selects choice
                        manageSelect(rim_bolt, [], false);
                        manageSelect(rim_width, [], false);
                    }
                });

                tire_diameter.addEventListener('change', async () => {
                    if (tire_diameter.value) {
                        const rim_boltsData = await fetchData('by_rim/bp/', {region: 'eudm'});
                        manageSelect(rim_bolt, rim_boltsData.data, true); // Enable and populate the third select based on the second selects choice
                        manageSelect(rim_width, [], false);
                    }
                });

                rim_bolt.addEventListener('change', async () => {
                    if (rim_bolt.value) {
                        const rim_widthsData = await fetchData('by_rim/rw/', {bolt_pattern: rim_bolt.value});
                        manageSelect(rim_width, rim_widthsData.data, true); // Enable and populate the third select based on the second selects choice
                    }
                });

                rim_width.addEventListener('change', () => {
                    // Enable the submit button if all selects have a value
                    const isFormComplete = [tire_width, tire_profile, tire_diameter, rim_bolt, rim_width].every(select => select && select.value);
                    manageSelect(submitButton, [], isFormComplete);
                });

                break;
            case '3':
                rim_diametersData = await fetchData('by_rim/rd/', {region: 'eudm'});
                manageSelect(rim_diameter, rim_diametersData.data, true); // Enable and populate the first select

                manageSelect(rim_bolt, [], false);
                manageSelect(rim_width, [], false);
                manageSelect(rim_et, [], false);

                // Set up event listeners for select changes
                rim_diameter.addEventListener('change', async () => {
                    if (rim_diameter.value) {
                        const rim_boltsData = await fetchData('by_rim/bp/', {
                            rim_diameter: rim_diameter.value,
                            region: 'eudm'
                        });
                        manageSelect(rim_bolt, rim_boltsData.data, true); // Enable and populate the second select based on the first selects choice
                        manageSelect(rim_width, [], false); // Disable and clear the third select until the second select is chosen
                        manageSelect(rim_et, [], false);
                    }
                });

                rim_bolt.addEventListener('change', async () => {
                    if (rim_bolt.value) {
                        const rim_widthsData = await fetchData('by_rim/rw/', {
                            rim_diameter: rim_diameter.value,
                            bolt_pattern: rim_bolt.value,
                            region: 'eudm'
                        });
                        manageSelect(rim_width, rim_widthsData.data, true); // Enable and populate the third select based on the second selects choice
                        manageSelect(rim_et, [], false);
                    }
                });

                rim_width.addEventListener('change', async () => {
                    if (rim_width.value) {
                        const rim_etsData = await fetchData('by_rim/of/', {
                            rim_diameter: rim_diameter.value,
                            bolt_pattern: rim_bolt.value,
                            rim_width: rim_width.value,
                            region: 'eudm'
                        });
                        manageSelect(rim_et, rim_etsData.data, true); // Enable and populate the third select based on the second selects choice
                    }
                });

                rim_et.addEventListener('change', () => {
                    // Enable the submit button if all selects have a value
                    const isFormComplete = [rim_diameter, rim_bolt, rim_width, rim_et].every(select => select && select.value);
                    manageSelect(submitButton, [], isFormComplete);
                });

                break;
        }
    }

    async function initializeCarForm(activeTabContent, formAction) {
        const makes = activeTabContent.querySelector('select[data-name="car-marka"]');
        const models = activeTabContent.querySelector('select[data-name="car-model"]');
        const generations = activeTabContent.querySelector('select[data-name="car-generacja"]');
        const years = activeTabContent.querySelector('select[data-name="car-rok"]');
        const engines = activeTabContent.querySelector('select[data-name="car-silnik"]');
        const submitButton = activeTabContent.querySelector('input[type="submit"]');

        // Define event listener for form submission
        submitButton.form.addEventListener('submit', function (event) {
            event.preventDefault();

            localStorage.setItem('searchBy', 'byCar');

            const queryParameters = {
                'filter.p.car.make': makes.value,
                'filter.p.car.model': models.value,
                'filter.p.car.generation': generations.value,
                'filter.p.car.year': years.value,
                'filter.p.car.engine': engines.value
            };

            const queryString = Object.entries(queryParameters).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');
            window.location.href = `${formAction}?${queryString}`;
        });

        manageSelect(makes);
        manageSelect(models, [], false);
        manageSelect(generations, [], false);
        manageSelect(years, [], false);
        manageSelect(engines, [], false);
        manageSelect(submitButton, [], false);

        // Fetch data for the first select and update options
        const makesData = await fetchData('makes/', {region: 'eudm'});
        manageSelect(makes, makesData.data.map(make => ({value: make.slug, name: make.name})), true);

        // Set up event listeners for select changes
        makes.addEventListener('change', async () => {
            if (makes.value) {
                const modelsData = await fetchData('models/', {make: makes.value});
                manageSelect(models, modelsData.data.map(model => ({value: model.slug, name: model.name})), true);
                manageSelect(generations, [], false); // Reset the subsequent selects
                manageSelect(years, [], false);
                manageSelect(engines, [], false);
            }
        });

        models.addEventListener('change', async () => {
            if (models.value) {
                const generationsData = await fetchData('generations/', {make: makes.value, model: models.value});
                manageSelect(generations, generationsData.data.map(generation => ({
                    value: generation.slug,
                    name: generation.name
                })), true);
                manageSelect(years, [], false); // Further select reset
                manageSelect(engines, [], false);
            }
        });

        generations.addEventListener('change', async () => {
            if (generations.value) {
                const generationsData = await fetchData('generations/', {make: makes.value, model: models.value});
                const selectedGeneration = generationsData.data.find(gen => gen.slug === generations.value);
                manageSelect(years, selectedGeneration.years.map(year => ({value: year, name: year.toString()})), true);
                manageSelect(engines, [], false);
            }
        });

        years.addEventListener('change', async () => {
            if (years.value) {
                const enginesData = await fetchData('modifications/', {
                    make: makes.value,
                    model: models.value,
                    year: years.value
                });
                manageSelect(engines, enginesData.data.map(engine => ({value: engine.slug, name: engine.name})), true);
            }
        });

        [makes, models, generations, years, engines].forEach(select => select.addEventListener('change', () => {
            // Enable the submit button if all selects have a value
            const isFormComplete = [makes, models, generations, years, engines].every(select => select && select.value);
            manageSelect(submitButton, [], isFormComplete);
        }));
    }

    function getActiveTabContent() {
        let activePage = window.location.pathname;
        let activeTabContent;

        switch (true) {
            case activePage === '/':
                activeTabContent = document.querySelector('.w-tab-pane.w--tab-active > div > div.w-tab-pane.w--tab-active');
                break;

            default:
                if (activePage.includes('/pages/opony/')) {
                    activeTabContent = document.getElementById('tire-manufacturer-form');
                } else if (activePage.includes('/collections/')) {
                    activeTabContent = document.querySelector('div[data-sub-tab].w-tab-pane.w--tab-active');
                }
                break;
        }

        return activeTabContent;
    }

    function getActiveSubTabNumber() {
        {% comment %} ActiveTabContent for home page {% endcomment %}
        let activeSubTab = document.querySelector('.tab-link-left-search.w--current');
        if (activeSubTab) {
            return activeSubTab.getAttribute('data-w-tab').split('.')[1];
        }

        {% comment %} ActiveTabContent for manufacturer subpage {% endcomment %}
        activeSubTab = document.querySelector('[data-w-tab="1.1"]');
        if (activeSubTab) {
            return activeSubTab.getAttribute('data-w-tab').split('.')[1];
        }

        {% comment %} ActiveTabContent for collection page {% endcomment %}
        activeSubTab = document.querySelector('div[data-sub-tab].w-tab-pane.w--tab-active');
        if (activeSubTab) {
            return activeSubTab.getAttribute('data-sub-tab').split('.')[1];
        }

        return null; // Zwraca null, jeśli żadna z podzakładek nie jest aktywna
    }

    function activateFormInitialization() {
        const activeTabContent = getActiveTabContent();
        if (!activeTabContent) {
            console.log('Active tab content not found.');
            return
        }

        const formActionBaseURL = 'https://moto-m5.myshopify.com/collections/';
        let activeSubTabNumber = getActiveSubTabNumber();

        let formAction = `${formActionBaseURL}opony`; // Default action
        switch (activeSubTabNumber) {
            case '2':
                formAction = `${formActionBaseURL}kola`;
                break;
            case '3':
                formAction = `${formActionBaseURL}felgi`;
                break;
        }

        const submitButton = activeTabContent.querySelector('input[type="submit"]');
        if (submitButton) {
            manageSelect(submitButton, [], false); // Initially disable the submit button
        }

        if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-1')) {
            // "Search by Size"
            initializeSizeForm(activeTabContent, activeSubTabNumber, formAction);
        } else if (document.querySelector('.w-tab-pane.w--tab-active').classList.contains('tab-pane-tab-2')) {
            // "Search by Car"
            initializeCarForm(activeTabContent, formAction);
        }
    }

    // Listen for tab changes to re-initialize form for the active tab
    document.querySelectorAll('.tab-link-top-search, .tab-link-left-search, .tab-link-tab-2').forEach(tab => {
        tab.addEventListener('click', () => {
            setTimeout(activateFormInitialization, 150);
        });
    });

    activateFormInitialization(); // Initialize the form for the currently active tab on page load
});
